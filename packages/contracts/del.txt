Compiled 79 Solidity files successfully


  Contract: Access Control: Liquity functions with the caller restricted to Liquity contract(s)
    BorrowerOperations
      ✔ moveETHGainToTrove(): reverts when called by an account that is not StabilityPool
    TroveManager
      ✔ applyPendingRewards(): reverts when called by an account that is not BorrowerOperations
      ✔ updateRewardSnapshots(): reverts when called by an account that is not BorrowerOperations
      ✔ removeStake(): reverts when called by an account that is not BorrowerOperations
      ✔ updateStakeAndTotalStakes(): reverts when called by an account that is not BorrowerOperations
      ✔ closeTrove(): reverts when called by an account that is not BorrowerOperations
      ✔ addTroveOwnerToArray(): reverts when called by an account that is not BorrowerOperations
      ✔ setTroveStatus(): reverts when called by an account that is not BorrowerOperations
      ✔ increaseTroveColl(): reverts when called by an account that is not BorrowerOperations
      ✔ decreaseTroveColl(): reverts when called by an account that is not BorrowerOperations
      ✔ increaseTroveDebt(): reverts when called by an account that is not BorrowerOperations
      ✔ decreaseTroveDebt(): reverts when called by an account that is not BorrowerOperations (72ms)
    ActivePool
      ✔ sendETH(): reverts when called by an account that is not BO nor TroveM nor SP
      ✔ increaseLUSDDebt(): reverts when called by an account that is not BO nor TroveM
      ✔ decreaseLUSDDebt(): reverts when called by an account that is not BO nor TroveM nor SP
      ✔ addETH(): reverts when called by an account that is not Borrower Operations nor Default Pool
    DefaultPool
      ✔ sendETHToActivePool(): reverts when called by an account that is not TroveManager
      ✔ increaseLUSDDebt(): reverts when called by an account that is not TroveManager
      ✔ decreaseLUSD(): reverts when called by an account that is not TroveManager
      ✔ addETH(): reverts when called by an account that is not the Active Pool
    StabilityPool
      ✔ offset(): reverts when called by an account that is not TroveManager
      ✔ addETH(): reverts when called by an account that is not the Active Pool
    LUSDToken
      ✔ mint(): reverts when called by an account that is not BorrowerOperations
      ✔ burn(): reverts when called by an account that is not BO nor TroveM nor SP
      ✔ sendToPool(): reverts when called by an account that is not StabilityPool
      ✔ returnFromPool(): reverts when called by an account that is not TroveManager nor StabilityPool
    SortedTroves
      ✔ insert(): reverts when called by an account that is not BorrowerOps or TroveM
      ✔ remove(): reverts when called by an account that is not TroveManager
      ✔ reinsert(): reverts when called by an account that is neither BorrowerOps nor TroveManager
    LockupContract
      ✔ withdrawLQTY(): reverts when caller is not beneficiary
    LQTYStaking
      ✔ increaseF_LUSD(): reverts when caller is not TroveManager
    LQTYToken
      ✔ sendToLQTYStaking(): reverts when caller is not the LQTYSstaking (86ms)
    CommunityIssuance
      ✔ sendLQTY(): reverts when caller is not the StabilityPool
      ✔ issueLQTY(): reverts when caller is not the StabilityPool

  Contract: BorrowerOperations
    Without proxy
      ✔ addColl(): reverts when top-up would leave trove with ICR < MCR (677ms)
      ✔ addColl(): Increases the activePool ETH and raw ether balance by correct amount (759ms)
      ✔ addColl(), active Trove: adds the correct collateral amount to the Trove (663ms)
      ✔ addColl(), active Trove: Trove is in sortedList before and after (784ms)
      ✔ addColl(), active Trove: updates the stake and updates the total stakes (1833ms)
      ✔ addColl(), active Trove: applies pending rewards and updates user's L_ETH, L_LUSDDebt snapshots (3487ms)
      ✔ addColl(), reverts if trove is non-existent or closed (208ms)
      ✔ addColl(): can add collateral in Recovery Mode (142ms)
      ✔ withdrawColl(): reverts when withdrawal would leave trove with ICR < MCR (168ms)
      ✔ withdrawColl(): reverts when calling address does not have active trove (181ms)
      ✔ withdrawColl(): reverts when system is in Recovery Mode (211ms)
      ✔ withdrawColl(): reverts when requested ETH withdrawal is > the trove's collateral (230ms)
      ✔ withdrawColl(): reverts when withdrawal would bring the user's ICR < MCR (137ms)
      ✔ withdrawColl(): reverts if system is in Recovery Mode (161ms)
      ✔ withdrawColl(): doesn’t allow a user to completely withdraw all collateral from their Trove (due to gas compensation) (161ms)
      ✔ withdrawColl(): leaves the Trove active when the user withdraws less than all the collateral (128ms)
      ✔ withdrawColl(): reduces the Trove's collateral by the correct amount (138ms)
      ✔ withdrawColl(): reduces ActivePool ETH and raw ether by correct amount (157ms)
      ✔ withdrawColl(): updates the stake and updates the total stakes (118ms)
      ✔ withdrawColl(): sends the correct amount of ETH to the user (122ms)
      ✔ withdrawColl(): applies pending rewards and updates user's L_ETH, L_LUSDDebt snapshots (496ms)
      ✔ withdrawLUSD(): reverts when withdrawal would leave trove with ICR < MCR (216ms)
      ✔ withdrawLUSD(): decays a non-zero base rate (510ms)
      ✔ withdrawLUSD(): reverts if max fee > 100% (343ms)
      ✔ withdrawLUSD(): reverts if max fee < 0.5% in Normal mode (339ms)
      ✔ withdrawLUSD(): reverts if fee exceeds max fee percentage (496ms)
      ✔ withdrawLUSD(): succeeds when fee is less than max fee percentage (709ms)
      ✔ withdrawLUSD(): doesn't change base rate if it is already zero (594ms)
      ✔ withdrawLUSD(): lastFeeOpTime doesn't update if less time than decay interval has passed since the last fee operation (436ms)
      ✔ withdrawLUSD(): borrower can't grief the baseRate and stop it decaying by issuing debt at higher frequency than the decay granularity (445ms)
      ✔ withdrawLUSD(): borrowing at non-zero base rate sends LUSD fee to LQTY staking contract (533ms)
      ✔ withdrawLUSD(): borrowing at non-zero base records the (drawn debt + fee) on the Trove struct (509ms)
      ✔ withdrawLUSD(): Borrowing at non-zero base rate increases the LQTY staking contract LUSD fees-per-unit-staked (533ms)
      ✔ withdrawLUSD(): Borrowing at non-zero base rate sends requested amount to the user (547ms)
      ✔ withdrawLUSD(): Borrowing at zero base rate changes LUSD fees-per-unit-staked (527ms)
      ✔ withdrawLUSD(): Borrowing at zero base rate sends debt request to user (520ms)
      ✔ withdrawLUSD(): reverts when calling address does not have active trove (340ms)
      ✔ withdrawLUSD(): reverts when requested withdrawal amount is zero LUSD (301ms)
      ✔ withdrawLUSD(): reverts when system is in Recovery Mode (420ms)
      ✔ withdrawLUSD(): reverts when withdrawal would bring the trove's ICR < MCR (329ms)
      ✔ withdrawLUSD(): reverts when a withdrawal would cause the TCR of the system to fall below the CCR (315ms)
      ✔ withdrawLUSD(): reverts if system is in Recovery Mode (295ms)
      ✔ withdrawLUSD(): increases the Trove's LUSD debt by the correct amount (165ms)
      ✔ withdrawLUSD(): increases LUSD debt in ActivePool by correct amount (170ms)
      ✔ withdrawLUSD(): increases user LUSDToken balance by correct amount (178ms)
      ✔ repayLUSD(): reverts when repayment would leave trove with ICR < MCR (221ms)
      ✔ repayLUSD(): Succeeds when it would leave trove with net debt >= minimum net debt (255ms)
      ✔ repayLUSD(): reverts when it would leave trove with net debt < minimum net debt (153ms)
      ✔ adjustTrove(): Reverts if repaid amount is greater than current debt (221ms)
      ✔ repayLUSD(): reverts when calling address does not have active trove (249ms)
      ✔ repayLUSD(): reverts when attempted repayment is > the debt of the trove (266ms)
      ✔ repayLUSD(): reduces the Trove's LUSD debt by the correct amount (209ms)
      ✔ repayLUSD(): decreases LUSD debt in ActivePool by correct amount (230ms)
      ✔ repayLUSD(): decreases user LUSDToken balance by correct amount (241ms)
      ✔ repayLUSD(): can repay debt in Recovery Mode (242ms)
      ✔ repayLUSD(): Reverts if borrower has insufficient LUSD balance to cover his debt repayment (233ms)
      ✔ adjustTrove(): reverts when adjustment would leave trove with ICR < MCR (241ms)
      ✔ adjustTrove(): reverts if max fee < 0.5% in Normal mode (168ms)
      ✔ adjustTrove(): allows max fee < 0.5% in Recovery mode (355ms)
      ✔ adjustTrove(): decays a non-zero base rate (684ms)
      ✔ adjustTrove(): doesn't decay a non-zero base rate when user issues 0 debt (487ms)
      ✔ adjustTrove(): doesn't change base rate if it is already zero (293ms)
      ✔ adjustTrove(): lastFeeOpTime doesn't update if less time than decay interval has passed since the last fee operation (509ms)
      ✔ adjustTrove(): borrower can't grief the baseRate and stop it decaying by issuing debt at higher frequency than the decay granularity (519ms)
      ✔ adjustTrove(): borrowing at non-zero base rate sends LUSD fee to LQTY staking contract (480ms)
      ✔ adjustTrove(): borrowing at non-zero base records the (drawn debt + fee) on the Trove struct (563ms)
      ✔ adjustTrove(): Borrowing at non-zero base rate increases the LQTY staking contract LUSD fees-per-unit-staked (540ms)
      ✔ adjustTrove(): Borrowing at non-zero base rate sends requested amount to the user (537ms)
      ✔ adjustTrove(): Borrowing at zero base rate changes LUSD balance of LQTY staking contract (510ms)
      ✔ adjustTrove(): Borrowing at zero base rate changes LQTY staking contract LUSD fees-per-unit-staked (527ms)
      ✔ adjustTrove(): Borrowing at zero base rate sends total requested LUSD to the user (489ms)
      ✔ adjustTrove(): reverts when calling address has no active trove (250ms)
      ✔ adjustTrove(): reverts in Recovery Mode when the adjustment would reduce the TCR (408ms)
      ✔ adjustTrove(): collateral withdrawal reverts in Recovery Mode (263ms)
      ✔ adjustTrove(): debt increase that would leave ICR < 150% reverts in Recovery Mode (233ms)
      ✔ adjustTrove(): debt increase that would reduce the ICR reverts in Recovery Mode (317ms)
      ✔ adjustTrove(): A trove with ICR < CCR in Recovery Mode can adjust their trove to ICR > CCR (318ms)
      ✔ adjustTrove(): A trove with ICR > CCR in Recovery Mode can improve their ICR (291ms)
      ✔ adjustTrove(): debt increase in Recovery Mode charges no fee (245ms)
      ✔ adjustTrove(): reverts when change would cause the TCR of the system to fall below the CCR (252ms)
      ✔ adjustTrove(): reverts when LUSD repaid is > debt of the trove (247ms)
      ✔ adjustTrove(): reverts when attempted ETH withdrawal is >= the trove's collateral (250ms)
      ✔ adjustTrove(): reverts when change would cause the ICR of the trove to fall below the MCR (298ms)
      ✔ adjustTrove(): With 0 coll change, doesnt change borrower's coll or ActivePool coll (161ms)
      ✔ adjustTrove(): With 0 debt change, doesnt change borrower's debt or ActivePool debt (177ms)
      ✔ adjustTrove(): updates borrower's debt and coll with an increase in both (251ms)
      ✔ adjustTrove(): updates borrower's debt and coll with a decrease in both (275ms)
      ✔ adjustTrove(): updates borrower's  debt and coll with coll increase, debt decrease (251ms)
      ✔ adjustTrove(): updates borrower's debt and coll with coll decrease, debt increase (236ms)
      ✔ adjustTrove(): updates borrower's stake and totalStakes with a coll increase (247ms)
      ✔ adjustTrove(): updates borrower's stake and totalStakes with a coll decrease (266ms)
      ✔ adjustTrove(): changes LUSDToken balance by the requested decrease (233ms)
      ✔ adjustTrove(): changes LUSDToken balance by the requested increase (228ms)
      ✔ adjustTrove(): Changes the activePool ETH and raw ether balance by the requested decrease (279ms)
      ✔ adjustTrove(): Changes the activePool ETH and raw ether balance by the amount of ETH sent (474ms)
      ✔ adjustTrove(): Changes the LUSD debt in ActivePool by requested decrease (231ms)
      ✔ adjustTrove(): Changes the LUSD debt in ActivePool by requested increase (240ms)
      ✔ adjustTrove(): new coll = 0 and new debt = 0 is not allowed, as gas compensation still counts toward ICR (254ms)
      ✔ adjustTrove(): Reverts if requested debt increase and amount is zero (195ms)
      ✔ adjustTrove(): Reverts if requested coll withdrawal and ether is sent (219ms)
      ✔ adjustTrove(): Reverts if it’s zero adjustment (126ms)
      ✔ adjustTrove(): Reverts if requested coll withdrawal is greater than trove's collateral (241ms)
      ✔ adjustTrove(): Reverts if borrower has insufficient LUSD balance to cover his debt repayment (251ms)
      ✔ Internal _adjustTrove(): reverts when op is a withdrawal and _borrower param is not the msg.sender (252ms)
      ✔ closeTrove(): reverts when it would lower the TCR below CCR (259ms)
      ✔ closeTrove(): reverts when calling address does not have active trove (224ms)
      ✔ closeTrove(): reverts when system is in Recovery Mode (458ms)
      ✔ closeTrove(): reverts when trove is the only one in the system (196ms)
      ✔ closeTrove(): reduces a Trove's collateral to zero (279ms)
      ✔ closeTrove(): reduces a Trove's debt to zero (264ms)
      ✔ closeTrove(): sets Trove's stake to zero (269ms)
      ✔ closeTrove(): zero's the troves reward snapshots (625ms)
      ✔ closeTrove(): sets trove's status to closed and removes it from sorted troves list (283ms)
      ✔ closeTrove(): reduces ActivePool ETH and raw ether by correct amount (305ms)
      ✔ closeTrove(): reduces ActivePool debt by correct amount (299ms)
      ✔ closeTrove(): updates the the total stakes (358ms)
      ✔ closeTrove(): sends the correct amount of ETH to the user (271ms)
      ✔ closeTrove(): subtracts the debt of the closed Trove from the Borrower's LUSDToken balance (275ms)
      ✔ closeTrove(): applies pending rewards (823ms)
      ✔ closeTrove(): reverts if borrower has insufficient LUSD balance to repay his entire debt (205ms)
      ✔ openTrove(): emits a TroveUpdated event with the correct collateral and debt (505ms)
      ✔ openTrove(): Opens a trove with net debt >= minimum net debt (194ms)
      ✔ openTrove(): reverts if net debt < minimum net debt (271ms)
      ✔ openTrove(): decays a non-zero base rate (560ms)
      ✔ openTrove(): doesn't change base rate if it is already zero (524ms)
      ✔ openTrove(): lastFeeOpTime doesn't update if less time than decay interval has passed since the last fee operation (515ms)
      ✔ openTrove(): reverts if max fee > 100% (53ms)
      ✔ openTrove(): reverts if max fee < 0.5% in Normal mode (81ms)
      ✔ openTrove(): allows max fee < 0.5% in Recovery Mode (231ms)
      ✔ openTrove(): reverts if fee exceeds max fee percentage (412ms)
      ✔ openTrove(): succeeds when fee is less than max fee percentage (592ms)
      ✔ openTrove(): borrower can't grief the baseRate and stop it decaying by issuing debt at higher frequency than the decay granularity (518ms)
      ✔ openTrove(): borrowing at non-zero base rate sends LUSD fee to LQTY staking contract (445ms)
      ✔ openTrove(): borrowing at non-zero base records the (drawn debt + fee  + liq. reserve) on the Trove struct (456ms)
      ✔ openTrove(): Borrowing at non-zero base rate increases the LQTY staking contract LUSD fees-per-unit-staked (486ms)
      ✔ openTrove(): Borrowing at non-zero base rate sends requested amount to the user (469ms)
      ✔ openTrove(): Borrowing at zero base rate changes the LQTY staking contract LUSD fees-per-unit-staked (412ms)
      ✔ openTrove(): Borrowing at zero base rate charges minimum fee (264ms)
      ✔ openTrove(): reverts when system is in Recovery Mode and ICR < CCR (219ms)
      ✔ openTrove(): reverts when trove ICR < MCR (287ms)
      ✔ openTrove(): reverts when opening the trove would cause the TCR of the system to fall below the CCR (199ms)
      ✔ openTrove(): reverts if trove is already active (414ms)
      ✔ openTrove(): Can open a trove with ICR >= CCR when system is in Recovery Mode (273ms)
      ✔ openTrove(): Reverts opening a trove with min debt when system is in Recovery Mode (211ms)
      ✔ openTrove(): creates a new Trove and assigns the correct collateral and debt amount (105ms)
      ✔ openTrove(): adds Trove owner to TroveOwners array (112ms)
      ✔ openTrove(): creates a stake and adds it to total stakes (174ms)
      ✔ openTrove(): inserts Trove to Sorted Troves list (123ms)
      ✔ openTrove(): Increases the activePool ETH and raw ether balance by correct amount (132ms)
      ✔ openTrove(): records up-to-date initial snapshots of L_ETH and L_LUSDDebt (370ms)
      ✔ openTrove(): allows a user to open a Trove, then close it, then re-open it (449ms)
      ✔ openTrove(): increases the Trove's LUSD debt by the correct amount (103ms)
      ✔ openTrove(): increases LUSD debt in ActivePool by the debt of the trove (144ms)
      ✔ openTrove(): increases user LUSDToken balance by correct amount (103ms)
      ✔ getCompositeDebt(): returns debt + gas comp
      getNewICRFromTroveChange() returns the correct ICR
        ✔ collChange = 0, debtChange = 0
        ✔ collChange = 0, debtChange is positive
        ✔ collChange = 0, debtChange is negative
        ✔ collChange is positive, debtChange is 0
        ✔ collChange is negative, debtChange is 0
        ✔ collChange is negative, debtChange is negative
        ✔ collChange is positive, debtChange is positive
        ✔ collChange is positive, debtChange is negative
        ✔ collChange is negative, debtChange is positive
      getNewTCRFromTroveChange() returns the correct TCR
        ✔ collChange = 0, debtChange = 0 (297ms)
        ✔ collChange = 0, debtChange is positive (300ms)
        ✔ collChange = 0, debtChange is negative (311ms)
        ✔ collChange is positive, debtChange is 0 (271ms)
        ✔ collChange is negative, debtChange is 0 (277ms)
        ✔ collChange is negative, debtChange is negative (293ms)
        ✔ collChange is positive, debtChange is positive (250ms)
        ✔ collChange is positive, debtChange is negative (320ms)
        ✔ collChange is negative, debtChange is positive (282ms)

  Contract: CollSurplusPool
    ✔ CollSurplusPool::getETH(): Returns the ETH balance of the CollSurplusPool after redemption (553ms)
    ✔ CollSurplusPool: claimColl(): Reverts if caller is not Borrower Operations
    ✔ CollSurplusPool: claimColl(): Reverts if nothing to claim
    ✔ CollSurplusPool: reverts trying to send ETH to it
    ✔ CollSurplusPool: accountSurplus: reverts if caller is not Trove Manager

  Contract: Deployment script - Sets correct contract addresses dependencies after deployment
    ✔ Sets the correct PriceFeed address in TroveManager
    ✔ Sets the correct LUSDToken address in TroveManager
    ✔ Sets the correct SortedTroves address in TroveManager
    ✔ Sets the correct BorrowerOperations address in TroveManager
    ✔ Sets the correct ActivePool address in TroveManager
    ✔ Sets the correct DefaultPool address in TroveManager
    ✔ Sets the correct StabilityPool address in TroveManager
    ✔ Sets the correct LQTYStaking address in TroveManager
    ✔ Sets the correct StabilityPool address in ActivePool
    ✔ Sets the correct DefaultPool address in ActivePool
    ✔ Sets the correct BorrowerOperations address in ActivePool
    ✔ Sets the correct TroveManager address in ActivePool
    ✔ Sets the correct ActivePool address in StabilityPool
    ✔ Sets the correct BorrowerOperations address in StabilityPool
    ✔ Sets the correct LUSDToken address in StabilityPool
    ✔ Sets the correct TroveManager address in StabilityPool
    ✔ Sets the correct TroveManager address in DefaultPool
    ✔ Sets the correct ActivePool address in DefaultPool
    ✔ Sets the correct TroveManager address in SortedTroves
    ✔ Sets the correct BorrowerOperations address in SortedTroves
    ✔ Sets the correct TroveManager address in BorrowerOperations
    ✔ Sets the correct PriceFeed address in BorrowerOperations
    ✔ Sets the correct SortedTroves address in BorrowerOperations
    ✔ Sets the correct ActivePool address in BorrowerOperations
    ✔ Sets the correct DefaultPool address in BorrowerOperations
    ✔ Sets the correct LQTYStaking address in BorrowerOperations
    ✔ Sets the correct LQTYToken address in LQTYStaking
    ✔ Sets the correct ActivePool address in LQTYStaking
    ✔ Sets the correct ActivePool address in LQTYStaking
    ✔ Sets the correct ActivePool address in LQTYStaking
    ✔ Sets the correct BorrowerOperations address in LQTYStaking
    ✔ Sets the correct CommunityIssuance address in LQTYToken
    ✔ Sets the correct LQTYStaking address in LQTYToken
    ✔ Sets the correct LockupContractFactory address in LQTYToken
    ✔ Sets the correct LQTYToken address in LockupContractFactory
    ✔ Sets the correct LQTYToken address in CommunityIssuance
    ✔ Sets the correct StabilityPool address in CommunityIssuance

  Contract: Fee arithmetic tests
    ✔ minutesPassedSinceLastFeeOp(): returns minutes passed for no time increase
    ✔ minutesPassedSinceLastFeeOp(): returns minutes passed between time of last fee operation and current block.timestamp, rounded down to nearest minutes (556ms)
    ✔ decayBaseRateFromBorrowing(): returns the initial base rate for no time increase (45ms)
    ✔ decayBaseRateFromBorrowing(): returns the initial base rate for less than one minute passed  (121ms)
    ✔ decayBaseRateFromBorrowing(): returns correctly decayed base rate, for various durations. Initial baseRate = 0.01 (1724ms)
    ✔ decayBaseRateFromBorrowing(): returns correctly decayed base rate, for various durations. Initial baseRate = 0.1 (1688ms)
    ✔ decayBaseRateFromBorrowing(): returns correctly decayed base rate, for various durations. Initial baseRate = 0.34539284 (1924ms)
    ✔ decayBaseRateFromBorrowing(): returns correctly decayed base rate, for various durations. Initial baseRate = 0.9976 (1638ms)
    Basic exponentiation
      ✔ decPow(): for exponent = 0, returns 1, regardless of base
      ✔ decPow(): for exponent = 1, returns base, regardless of base
      ✔ decPow(): for base = 0, returns 0 for any exponent other than 0 (120ms)
      ✔ decPow(): for base = 1, returns 1 for any exponent (108ms)
      ✔ decPow(): for exponent = 2, returns the square of the base (104ms)
      ✔ decPow(): correct output for various bases and exponents (311ms)
      ✔ decPow(): abs. error < 1e-9 for exponent = 7776000 (seconds in three months) (3650ms)
      ✔ decPow(): abs. error < 1e-9 for exponent = 2592000 (seconds in one month) (3096ms)
      ✔ decPow(): abs. error < 1e-9 for exponent = 43200 (minutes in one month) (2169ms)
      ✔ decPow(): abs. error < 1e-9 for exponent = 525600 (minutes in one year) (2315ms)
      ✔ decPow(): abs. error < 1e-9 for exponent = 2628000 (minutes in five years) (2610ms)
      ✔ decPow(): abs. error < 1e-9 for exponent = minutes in ten years (2612ms)
      ✔ decPow(): abs. error < 1e-9 for exponent = minutes in one hundred years (2900ms)
      - decPow(): overflow test: doesn't overflow for exponent = minutes in 1000 years

  Contract: Gas compensation tests
    ✔ _getCollGasCompensation(): returns the 0.5% of collaterall if it is < $10 in value
    ✔ _getCollGasCompensation(): returns 0.5% of collaterall when 0.5% of collateral < $10 in value
    ✔ getCollGasCompensation(): returns 0.5% of collaterall when 0.5% of collateral = $10 in value
    ✔ getCollGasCompensation(): returns 0.5% of collaterall when 0.5% of collateral = $10 in value
    ✔ _getCompositeDebt(): returns (debt + 50) when collateral < $10 in value
    ✔ getCompositeDebt(): returns (debt + 50) collateral = $10 in value
    ✔ getCompositeDebt(): returns (debt + 50) when 0.5% of collateral > $10 in value
    ✔ getCurrentICR(): Incorporates virtual debt, and returns the correct ICR for new troves (602ms)
    ✔ Gas compensation from pool-offset liquidations. All collateral paid as compensation (694ms)
    ✔ gas compensation from pool-offset liquidations: 0.5% collateral < $10 in value. Compensates $10 worth of collateral, liquidates the remainder (644ms)
    ✔ gas compensation from pool-offset liquidations: 0.5% collateral > $10 in value. Compensates 0.5% of  collateral, liquidates the remainder (916ms)
    ✔ Gas compensation from pool-offset liquidations. Liquidation event emits the correct gas compensation and total liquidated coll and debt (617ms)
    ✔ gas compensation from pool-offset liquidations. Liquidation event emits the correct gas compensation and total liquidated coll and debt (643ms)
    ✔ gas compensation from pool-offset liquidations: 0.5% collateral > $10 in value. Liquidation event emits the correct gas compensation and total liquidated coll and debt (652ms)
    ✔ liquidateTroves(): full offset.  Compensates the correct amount, and liquidates the remainder (760ms)
    ✔ liquidateTroves(): full redistribution. Compensates the correct amount, and liquidates the remainder (562ms)
    ✔ liquidateTroves(): full offset. Liquidation event emits the correct gas compensation and total liquidated coll and debt (777ms)
    ✔ liquidateTroves(): full redistribution. Liquidation event emits the correct gas compensation and total liquidated coll and debt (769ms)
    ✔ Trove ordering: same collateral, decreasing debt. Price successively increases. Troves should maintain ordering by ICR (846ms)
    ✔ Trove ordering: increasing collateral, constant debt. Price successively increases. Troves should maintain ordering by ICR (1713ms)
    ✔ Trove ordering: Constant raw collateral ratio (excluding virtual debt). Price successively increases. Troves should maintain ordering by ICR (1308ms)

  Contract: LQTY Token
    ✔ balanceOf(): gets the balance of the account
    ✔ totalSupply(): gets the total supply
    ✔ name(): returns the token's name
    ✔ symbol(): returns the token's symbol
    ✔ version(): returns the token contract's version
    ✔ decimal(): returns the number of decimal digits used
    ✔ allowance(): returns an account's spending allowance for another account's balance
    ✔ approve(): approves an account to spend the specified ammount
    ✔ approve(): reverts when spender param is address(0)
    ✔ approve(): reverts when owner param is address(0) (38ms)
    ✔ transferFrom(): successfully transfers from an account which it is approved to transfer from (82ms)
    ✔ transfer(): increases the recipient's balance by the correct amount (47ms)
    ✔ transfer(): reverts when amount exceeds sender's balance
    ✔ transfer(): transfer to a blacklisted address reverts (69ms)
    ✔ transfer(): transfer to or from the zero-address reverts
    ✔ mint(): issues correct amount of tokens to the given address
    ✔ mint(): reverts when beneficiary is address(0)
    ✔ increaseAllowance(): increases an account's allowance by the correct amount
    ✔ decreaseAllowance(): decreases an account's allowance by the correct amount
    ✔ sendToLQTYStaking(): changes balances of LQTYStaking and calling account by the correct amounts (38ms)
    ✔ Initializes PERMIT_TYPEHASH correctly
    ✔ Initializes DOMAIN_SEPARATOR correctly
    ✔ Initial nonce for a given address is 0
    1) permit(): permits and emits an Approval event (replay protected)
    ✔ permit(): fails with expired deadline
    ✔ permit(): fails with the wrong signature

  Contract: HintHelpers
    ✔ setup: makes accounts with nominal ICRs increasing by 1% consecutively (58ms)
    ✔ getApproxHint(): returns the address of a Trove within sqrt(length) positions of the correct insert position (639ms)
    ✔ getApproxHint(): returns the head of the list if the CR is the max uint256 value (184ms)
    ✔ getApproxHint(): returns the tail of the list if the CR is lower than ICR of any Trove (169ms)
    ✔ computeNominalCR()

  Contract: Deploying and funding One Year Lockup Contracts
    Deploying LCs
      ✔ LQTY Deployer can deploy LCs through the Factory
      ✔ Anyone can deploy LCs through the Factory
      ✔ LQTY Deployer can deploy LCs directly
      ✔ Anyone can deploy LCs directly
      ✔ LC deployment stores the beneficiary's address in the LC (47ms)
      ✔ LC deployment through the Factory registers the LC in the Factory (65ms)
      ✔ LC deployment through the Factory records the LC contract address and deployer as a k-v pair in the Factory (49ms)
      ✔ LC deployment through the Factory sets the unlockTime in the LC (45ms)
      ✔ Direct deployment of LC sets the unlockTime in the LC
      ✔ LC deployment through the Factory reverts when the unlockTime is < 1 year from system deployment (39ms)
      ✔ Direct deployment of LC reverts when the unlockTime is < 1 year from system deployment
    Funding LCs
      ✔ LQTY transfer from LQTY deployer to their deployed LC increases the LQTY balance of the LC (112ms)
      ✔ LQTY Multisig can transfer LQTY to LCs deployed through the factory by anyone (92ms)
    Withdrawal attempts on funded, inactive LCs immediately after funding
      ✔ Beneficiary can't withdraw from their funded LC (94ms)
      ✔ LQTY multisig can't withraw from a LC which it funded (104ms)
      ✔ No one can withraw from a LC (69ms)

  Contract: Deploying the LQTY contracts: LCF, CI, LQTYStaking, and LQTYToken 
    CommunityIssuance deployment
      ✔ Stores the deployer's address
    LQTYStaking deployment
      ✔ Stores the deployer's address
    LQTYToken deployment
      ✔ Stores the multisig's address
      ✔ Stores the CommunityIssuance address
      ✔ Stores the LockupContractFactory address
      ✔ Mints the correct LQTY amount to the multisig's address: (64.66 million)
      ✔ Mints the correct LQTY amount to the CommunityIssuance contract address: 32 million
      ✔ Mints the correct LQTY amount to the bountyAddress EOA: 2 million
      ✔ Mints the correct LQTY amount to the lpRewardsAddress EOA: 1.33 million
    Community Issuance deployment
      ✔ Stores the deployer's address
      ✔ Has a supply cap of 32 million
      ✔ Liquity AG can set addresses if CI's LQTY balance is equal or greater than 32 million  (91ms)
      ✔ Liquity AG can't set addresses if CI's LQTY balance is < 32 million  (134ms)
    Connecting LQTYToken to LCF, CI and LQTYStaking
      ✔ sets the correct LQTYToken address in LQTYStaking (498ms)
      ✔ sets the correct LQTYToken address in LockupContractFactory
      ✔ sets the correct LQTYToken address in CommunityIssuance (102ms)

  Contract: During the initial lockup period
    LQTY transfer during first year after LQTY deployment
      ✔ Liquity multisig can not transfer LQTY to a LC that was deployed directly (70ms)
      ✔ Liquity multisig can not transfer to an EOA or Liquity system contracts (227ms)
      ✔ Liquity multisig can not approve any EOA or Liquity system contract to spend their LQTY (224ms)
      ✔ Liquity multisig can not increaseAllowance for any EOA or Liquity contract (223ms)
      ✔ Liquity multisig can not decreaseAllowance for any EOA or Liquity contract (256ms)
      ✔ Liquity multisig can not be the sender in a transferFrom() call
      ✔ Liquity multisig can not stake their LQTY in the staking contract
      ✔ Anyone (other than Liquity multisig) can transfer LQTY to LCs deployed by anyone through the Factory (91ms)
      ✔ Anyone (other than Liquity multisig) can transfer LQTY to LCs deployed by anyone directly (113ms)
      ✔ Anyone (other than liquity multisig) can transfer to an EOA (44ms)
      ✔ Anyone (other than liquity multisig) can approve any EOA or to spend their LQTY
      ✔ Anyone (other than liquity multisig) can increaseAllowance for any EOA or Liquity contract (140ms)
      ✔ Anyone (other than liquity multisig) can decreaseAllowance for any EOA or Liquity contract (277ms)
      ✔ Anyone (other than liquity multisig) can be the sender in a transferFrom() call (45ms)
      ✔ Anyone (other than liquity AG) can stake their LQTY in the staking contract
    Lockup Contract Factory negative tests
      ✔ deployLockupContract(): reverts when LQTY token address is not set (57ms)
    Transferring LQTY to LCs
      ✔ Liquity multisig can transfer LQTY (vesting) to lockup contracts they deployed (78ms)
      ✔ Liquity multisig can transfer LQTY to lockup contracts deployed by anyone (81ms)
    Deploying new LCs
      ✔ LQTY Deployer can deploy LCs through the Factory
      ✔ Liquity multisig can deploy LCs through the Factory
      ✔ Anyone can deploy LCs through the Factory (44ms)
      ✔ LQTY Deployer can deploy LCs directly
      ✔ Liquity multisig can deploy LCs directly
      ✔ Anyone can deploy LCs directly
      ✔ Anyone can deploy LCs with unlockTime = one year from deployment, directly and through factory (65ms)
      ✔ Anyone can deploy LCs with unlockTime > one year from deployment, directly and through factory (70ms)
      ✔ No one can deploy LCs with unlockTime < one year from deployment, directly or through factory (58ms)
      Withdrawal Attempts on LCs before unlockTime has passed 
        ✔ Liquity multisig can't withdraw from a funded LC they deployed for another beneficiary through the Factory before the unlockTime
        ✔ Liquity multisig can't withdraw from a funded LC that someone else deployed before the unlockTime
        ✔ Beneficiary can't withdraw from their funded LC before the unlockTime (151ms)
        ✔ No one can withdraw from a beneficiary's funded LC before the unlockTime (214ms)

  Contract: After the initial lockup period has passed
    Deploying new LCs
      ✔ LQTY Deployer can deploy new LCs
      ✔ Anyone can deploy new LCs
      ✔ Anyone can deploy new LCs with unlockTime in the past (52ms)
      ✔ Anyone can deploy new LCs with unlockTime in the future
    Beneficiary withdrawal from initial LC
      ✔ A beneficiary can withdraw their full entitlement from their LC (72ms)
      ✔ A beneficiary on a vesting schedule can withdraw their total vested amount from their LC (84ms)
      ✔ Beneficiaries can withraw full LQTY balance of LC if it has increased since lockup period ended (158ms)
    Withdrawal attempts from LCs by non-beneficiaries
      ✔ LQTY Multisig can't withdraw from a LC they deployed through the Factory
      ✔ LQTY Multisig can't withdraw from a LC that someone else deployed
      ✔ Non-beneficiaries cannot withdraw from a LC (152ms)
    Transferring LQTY
      ✔ LQTY multisig can transfer LQTY to LCs they deployed (117ms)
      ✔ LQTY multisig can transfer tokens to LCs deployed by anyone (86ms)
      ✔ LQTY multisig can transfer LQTY directly to any externally owned account (51ms)
      ✔ Anyone can transfer LQTY to LCs deployed by anyone (111ms)
      ✔ Anyone can transfer to an EOA (86ms)
      ✔ Anyone can approve any EOA to spend their LQTY
      ✔ Anyone can increaseAllowance for any EOA or Liquity contract (209ms)
      ✔ Anyone can decreaseAllowance for any EOA or Liquity contract (575ms)
      ✔ Anyone can be the sender in a transferFrom() call (73ms)
      ✔ Anyone can stake their LQTY in the staking contract
    Withdrawal Attempts on new LCs before unlockTime has passed
      ✔ LQTY Deployer can't withdraw from a funded LC they deployed for another beneficiary through the Factory, before the unlockTime
      ✔ LQTY Deployer can't withdraw from a funded LC that someone else deployed, before the unlockTime
      ✔ Beneficiary can't withdraw from their funded LC, before the unlockTime (38ms)
      ✔ No one can withdraw from a beneficiary's funded LC, before the unlockTime (109ms)
    Withdrawals from new LCs after unlockTime has passed
      ✔ LQTY Deployer can't withdraw from a funded LC they deployed for another beneficiary through the Factory, after the unlockTime
      ✔ LQTY multisig can't withdraw from a funded LC when they are not the beneficiary, after the unlockTime
      ✔ Beneficiary can withdraw from their funded LC, after the unlockTime
      ✔ Non-beneficiaries can't withdraw from a beneficiary's funded LC, after the unlockTime (76ms)

  Contract: LiquityMath
    ✔ max works if a > b
    ✔ max works if a = b
    ✔ max works if a < b

  Contract: LiquitySafeMath128Tester
    ✔ add(): reverts if overflows
    ✔ sub(): reverts if underflows

  Contract: LQTY community issuance arithmetic tests
issuance fraction before: 221529352078264
issuance fraction after: 221529352078264
    ✔ getCumulativeIssuanceFraction(): fraction doesn't increase if less than a minute has passed (49ms)
    ✔ Cumulative issuance fraction is 0.0000013 after a minute
    ✔ Cumulative issuance fraction is 0.000079 after an hour
    ✔ Cumulative issuance fraction is 0.0019 after a day
    ✔ Cumulative issuance fraction is 0.013 after a week
    ✔ Cumulative issuance fraction is 0.055 after a month (71ms)
    ✔ Cumulative issuance fraction is 0.16 after 3 months
    ✔ Cumulative issuance fraction is 0.29 after 6 months
    ✔ Cumulative issuance fraction is 0.5 after a year
    ✔ Cumulative issuance fraction is 0.75 after 2 years
    ✔ Cumulative issuance fraction is 0.875 after 3 years
    ✔ Cumulative issuance fraction is 0.9375 after 4 years
    ✔ Cumulative issuance fraction is 0.999 after 10 years (38ms)
    ✔ Cumulative issuance fraction is 0.999999 after 20 years
    ✔ Cumulative issuance fraction is 0.999999999 after 30 years (43ms)
    ✔ Total LQTY tokens issued is 42.20 after a minute
    ✔ Total LQTY tokens issued is 2,531.94 after an hour
    ✔ Total LQTY tokens issued is 60,711.40 after a day
    ✔ Total LQTY tokens issued is 422,568.60 after a week
    ✔ Total LQTY tokens issued is 1,772,113.21 after a month (39ms)
    ✔ Total LQTY tokens issued is 5,027,363.22 after 3 months (43ms)
    ✔ Total LQTY tokens issued is 9,264,902.04 after 6 months (85ms)
    ✔ Total LQTY tokens issued is 16,000,000 after a year (50ms)
    ✔ Total LQTY tokens issued is 24,000,000 after 2 years
    ✔ Total LQTY tokens issued is 28,000,000 after 3 years (43ms)
    ✔ Total LQTY tokens issued is 30,000,000 after 4 years
    ✔ Total LQTY tokens issued is 31,968,750 after 10 years
    ✔ Total LQTY tokens issued is 31,999,969.48 after 20 years
    ✔ Total LQTY tokens issued is 31,999,999.97 after 30 years (38ms)
    - Frequent token issuance: issuance event every year, for 30 years
    - Frequent token issuance: issuance event every day, for 30 years
    - Frequent token issuance: issuance event every minute, for 1 month
    - Frequent token issuance: issuance event every minute, for 1 year

  Contract: LQTYStaking revenue share tests
    ✔ stake(): reverts if amount is zero (70ms)
    ✔ ETH fee per LQTY staked increases when a redemption fee is triggered and totalStakes > 0 (848ms)
    ✔ ETH fee per LQTY staked doesn't change when a redemption fee is triggered and totalStakes == 0 (891ms)
    ✔ LUSD fee per LQTY staked increases when a redemption fee is triggered and totalStakes > 0 (978ms)
    ✔ LUSD fee per LQTY staked doesn't change when a redemption fee is triggered and totalStakes == 0 (993ms)
    ✔ LQTY Staking: A single staker earns all ETH and LQTY fees that occur (1308ms)
    ✔ stake(): Top-up sends out all accumulated ETH and LUSD gains to the staker (1315ms)
    ✔ getPendingETHGain(): Returns the staker's correct pending ETH gain (1075ms)
    ✔ getPendingLUSDGain(): Returns the staker's correct pending LUSD gain (1229ms)
    ✔ LQTY Staking: Multiple stakers earn the correct share of all ETH and LQTY fees, based on their stake size (2411ms)
    ✔ receive(): reverts when it receives ETH from an address that is not the Active Pool
    ✔ unstake(): reverts if user has no stake
    ✔ Test requireCallerIsTroveManager

  Contract: LUSDToken
    Basic token functions, without Proxy
      ✔ balanceOf(): gets the balance of the account
      ✔ totalSupply(): gets the total supply
      ✔ name(): returns the token's name
      ✔ symbol(): returns the token's symbol
      ✔ decimal(): returns the number of decimal digits used
      ✔ allowance(): returns an account's spending allowance for another account's balance
      ✔ approve(): approves an account to spend the specified amount
      ✔ approve(): reverts when spender param is address(0)
      ✔ approve(): reverts when owner param is address(0)
      ✔ transferFrom(): successfully transfers from an account which is it approved to transfer from (55ms)
      ✔ transfer(): increases the recipient's balance by the correct amount
      ✔ transfer(): reverts if amount exceeds sender's balance
      ✔ transfer(): transferring to a blacklisted address reverts (46ms)
      ✔ increaseAllowance(): increases an account's allowance by the correct amount
      ✔ mint(): issues correct amount of tokens to the given address
      ✔ burn(): burns correct amount of tokens from the given address
      ✔ sendToPool(): changes balances of Stability pool and user by the correct amounts
      ✔ returnFromPool(): changes balances of Stability pool and user by the correct amounts
      ✔ transfer(): transferring to a blacklisted address reverts (61ms)
      ✔ decreaseAllowance(): decreases allowance by the expected amount
      ✔ decreaseAllowance(): fails trying to decrease more than previously allowed
      ✔ version(): returns the token contract's version
      ✔ Initializes PERMIT_TYPEHASH correctly
      ✔ Initializes DOMAIN_SEPARATOR correctly
      ✔ Initial nonce for a given address is 0
      2) permits and emits an Approval event (replay protected)
      ✔ permits(): fails with expired deadline
      ✔ permits(): fails with the wrong signature
    Basic token functions, with Proxy
      ✔ balanceOf(): gets the balance of the account
      ✔ totalSupply(): gets the total supply
      ✔ name(): returns the token's name
      ✔ symbol(): returns the token's symbol
      ✔ decimal(): returns the number of decimal digits used
      ✔ allowance(): returns an account's spending allowance for another account's balance
      ✔ approve(): approves an account to spend the specified amount
      ✔ transferFrom(): successfully transfers from an account which is it approved to transfer from (50ms)
      ✔ transfer(): increases the recipient's balance by the correct amount
      ✔ transfer(): reverts if amount exceeds sender's balance
      ✔ transfer(): transferring to a blacklisted address reverts (85ms)
      ✔ increaseAllowance(): increases an account's allowance by the correct amount (40ms)
      ✔ transfer(): transferring to a blacklisted address reverts (62ms)
      ✔ decreaseAllowance(): decreases allowance by the expected amount (51ms)
      ✔ decreaseAllowance(): fails trying to decrease more than previously allowed

  Contract: All Liquity functions with onlyOwner modifier
    TroveManager
      ✔ setAddresses(): reverts when called by non-owner, with wrong addresses, or twice (454ms)
    BorrowerOperations
      ✔ setAddresses(): reverts when called by non-owner, with wrong addresses, or twice (408ms)
    DefaultPool
      ✔ setAddresses(): reverts when called by non-owner, with wrong addresses, or twice (105ms)
    StabilityPool
      ✔ setAddresses(): reverts when called by non-owner, with wrong addresses, or twice (284ms)
    ActivePool
      ✔ setAddresses(): reverts when called by non-owner, with wrong addresses, or twice (288ms)
    SortedTroves
      ✔ setParams(): reverts when called by non-owner, with wrong addresses, or twice (100ms)
    CommunityIssuance
      ✔ setAddresses(): reverts when called by non-owner, with wrong addresses, or twice (92ms)
    LQTYStaking
      ✔ setAddresses(): reverts when called by non-owner, with wrong addresses, or twice (194ms)
    LockupContractFactory
      ✔ setLQTYAddress(): reverts when called by non-owner, with wrong address, or twice (629ms)

  Contract: StabilityPool
    ✔ getETH(): gets the recorded ETH balance
    ✔ getTotalLUSDDeposits(): gets the recorded LUSD balance

  Contract: ActivePool
    ✔ getETH(): gets the recorded ETH balance
    ✔ getLUSDDebt(): gets the recorded LUSD balance
    ✔ increaseLUSD(): increases the recorded LUSD balance by the correct amount
    ✔ decreaseLUSD(): decreases the recorded LUSD balance by the correct amount
    - sendETH(): decreases the recorded ETH balance by the correct amount

  Contract: DefaultPool
    ✔ getETH(): gets the recorded LUSD balance
    ✔ getLUSDDebt(): gets the recorded LUSD balance
    ✔ increaseLUSD(): increases the recorded LUSD balance by the correct amount
    ✔ decreaseLUSD(): decreases the recorded LUSD balance by the correct amount
    - sendETHToActivePool(): decreases the recorded ETH balance by the correct amount

  Contract: PriceFeed
    ✔ C1 Chainlink working: fetchPrice should return the correct price, taking into account the number of decimal digits on the aggregator (169ms)
    ✔ C1 Chainlink breaks, Tellor working: fetchPrice should return the correct Tellor price, taking into account Tellor's 6-digit granularity (247ms)
    ✔ C1 chainlinkWorking: Chainlink broken by zero latest roundId, Tellor working: switch to usingChainlinkTellorUntrusted (101ms)
    ✔ C1 chainlinkWorking: Chainlink broken by zero latest roundId, Tellor working: use Tellor price (94ms)
    ✔ C1 chainlinkWorking: Chainlink broken by zero timestamp, Tellor working, switch to usingChainlinkTellorUntrusted (41ms)
    ✔ C1 chainlinkWorking:  Chainlink broken by zero timestamp, Tellor working, return Tellor price (135ms)
    ✔ C1 chainlinkWorking: Chainlink broken by future timestamp, Tellor working, switch to usingChainlinkTellorUntrusted (76ms)
    ✔ C1 chainlinkWorking: Chainlink broken by future timestamp, Tellor working, return Tellor price (68ms)
    ✔ C1 chainlinkWorking: Chainlink broken by negative price, Tellor working,  switch to usingChainlinkTellorUntrusted (49ms)
    ✔ C1 chainlinkWorking: Chainlink broken by negative price, Tellor working, return Tellor price (57ms)
    ✔ C1 chainlinkWorking: Chainlink broken - decimals call reverted, Tellor working, switch to usingChainlinkTellorUntrusted (95ms)
    ✔ C1 chainlinkWorking: Chainlink broken - decimals call reverted, Tellor working, return Tellor price (82ms)
    ✔ C1 chainlinkWorking: Chainlink broken - latest round call reverted, Tellor working, switch to usingChainlinkTellorUntrusted (76ms)
    ✔ C1 chainlinkWorking: latest round call reverted, Tellor working, return the Tellor price (67ms)
    ✔ C1 chainlinkWorking: previous round call reverted, Tellor working, switch to usingChainlinkTellorUntrusted (101ms)
    ✔ C1 chainlinkWorking: previous round call reverted, Tellor working, return Tellor Price (48ms)
    ✔ C1 chainlinkWorking: Chainlink frozen, Tellor working: switch to usingTellorChainlinkFrozen (130ms)
    ✔ C1 chainlinkWorking: Chainlink frozen, Tellor working: return Tellor price (77ms)
    ✔ C1 chainlinkWorking: Chainlink frozen, Tellor frozen: switch to usingTellorChainlinkFrozen (71ms)
    ✔ C1 chainlinkWorking: Chainlink frozen, Tellor frozen: return last good price (65ms)
    ✔ C1 chainlinkWorking: Chainlink times out, Tellor broken by 0 price: switch to usingChainlinkTellorUntrusted (90ms)
    ✔ C1 chainlinkWorking: Chainlink times out, Tellor broken by 0 price: return last good price (134ms)
    ✔ C1 chainlinkWorking: Chainlink is out of date by <3hrs: remain chainlinkWorking (64ms)
    ✔ C1 chainlinkWorking: Chainlink is out of date by <3hrs: return Chainklink price (60ms)
    ✔ C1 chainlinkWorking: Chainlink price drop of >50%, switch to usingChainlinkTellorUntrusted (73ms)
    ✔ C1 chainlinkWorking: Chainlink price drop of >50%, return the Tellor price (89ms)
    ✔ C1 chainlinkWorking: Chainlink price drop of 50%, remain chainlinkWorking (125ms)
    ✔ C1 chainlinkWorking: Chainlink price drop of 50%, return the Chainlink price (84ms)
    ✔ C1 chainlinkWorking: Chainlink price drop of <50%, remain chainlinkWorking (66ms)
    ✔ C1 chainlinkWorking: Chainlink price drop of <50%, return Chainlink price (62ms)
    ✔ C1 chainlinkWorking: Chainlink price increase of >100%, switch to usingChainlinkTellorUntrusted (72ms)
    ✔ C1 chainlinkWorking: Chainlink price increase of >100%, return Tellor price (53ms)
    ✔ C1 chainlinkWorking: Chainlink price increase of 100%, remain chainlinkWorking (105ms)
    ✔ C1 chainlinkWorking: Chainlink price increase of 100%, return Chainlink price (76ms)
    ✔ C1 chainlinkWorking: Chainlink price increase of <100%, remain chainlinkWorking (75ms)
    ✔ C1 chainlinkWorking: Chainlink price increase of <100%,  return Chainlink price (80ms)
    ✔ C1 chainlinkWorking: Chainlink price drop of >50% and Tellor price matches: remain chainlinkWorking (80ms)
    ✔ C1 chainlinkWorking: Chainlink price drop of >50% and Tellor price matches: return Chainlink price (80ms)
    ✔ C1 chainlinkWorking: Chainlink price drop of >50% and Tellor price within 5% of Chainlink: remain chainlinkWorking (80ms)
    ✔ C1 chainlinkWorking: Chainlink price drop of >50% and Tellor price within 5% of Chainlink: return Chainlink price (74ms)
    ✔ C1 chainlinkWorking: Chainlink price drop of >50% and Tellor live but not within 5% of Chainlink: switch to usingChainlinkTellorUntrusted (72ms)
    ✔ C1 chainlinkWorking: Chainlink price drop of >50% and Tellor live but not within 5% of Chainlink: return Tellor price (76ms)
    ✔ C1 chainlinkWorking: Chainlink price drop of >50% and Tellor frozen: switch to usingChainlinkTellorUntrusted (84ms)
    ✔ C1 chainlinkWorking: Chainlink price drop of >50% and Tellor frozen: return last good price (91ms)
    ✔ C1 chainlinkWorking: Chainlink price drop of >50% and Tellor is broken by 0 price: switch to bothOracleSuspect (65ms)
    ✔ C1 chainlinkWorking: Chainlink price drop of >50% and Tellor is broken by 0 price: return last good price (75ms)
    ✔ C1 chainlinkWorking: Chainlink price drop of >50% and Tellor is broken by 0 timestamp: switch to bothOracleSuspect (65ms)
    ✔ C1 chainlinkWorking: Chainlink price drop of >50% and Tellor is broken by 0 timestamp: return last good price (75ms)
    ✔ C1 chainlinkWorking: Chainlink price drop of >50% and Tellor is broken by future timestamp: Pricefeed switches to bothOracleSuspect (56ms)
    ✔ C1 chainlinkWorking: Chainlink price drop of >50% and Tellor is broken by future timestamp: return last good price (72ms)
    ✔ C1 chainlinkWorking: Chainlink is working and Tellor is working - remain on chainlinkWorking (71ms)
    ✔ C1 chainlinkWorking: Chainlink is working and Tellor is working - return Chainlink price (71ms)
    ✔ C1 chainlinkWorking: Chainlink is working and Tellor freezes - remain on chainlinkWorking (91ms)
    ✔ C1 chainlinkWorking: Chainlink is working and Tellor freezes - return Chainlink price (78ms)
    ✔ C1 chainlinkWorking: Chainlink is working and Tellor breaks: switch to usingChainlinkTellorUntrusted (61ms)
    ✔ C1 chainlinkWorking: Chainlink is working and Tellor breaks: return Chainlink price (104ms)
    ✔ C2 usingTellorChainlinkUntrusted: Tellor breaks by zero price: switch to bothOraclesSuspect (76ms)
    ✔ C2 usingTellorChainlinkUntrusted: Tellor breaks by zero price: return last good price (66ms)
    ✔ C2 usingTellorChainlinkUntrusted: Tellor breaks by call reverted: switch to bothOraclesSuspect (54ms)
    ✔ C2 usingTellorChainlinkUntrusted: Tellor breaks by call reverted: return last good price (108ms)
    ✔ C2 usingTellorChainlinkUntrusted: Tellor breaks by zero timestamp: switch to bothOraclesSuspect (96ms)
    ✔ C2 usingTellorChainlinkUntrusted: Tellor breaks by zero timestamp: return last good price (192ms)
    ✔ C2 usingTellorChainlinkUntrusted: Tellor freezes - remain usingChainlinkTellorUntrusted (79ms)
    ✔ C2 usingTellorChainlinkUntrusted: Tellor freezes - return last good price (77ms)
    ✔ C2 usingTellorChainlinkUntrusted: both Tellor and Chainlink are live and <= 5% price difference - switch to chainlinkWorking
    ✔ C2 usingTellorChainlinkUntrusted: both Tellor and Chainlink are live and <= 5% price difference - return Chainlink price (98ms)
    ✔ C2 usingTellorChainlinkUntrusted: both Tellor and Chainlink are live and > 5% price difference - remain usingChainlinkTellorUntrusted (84ms)
    ✔ C2 usingTellorChainlinkUntrusted: both Tellor and Chainlink are live and > 5% price difference - return Tellor price
    ✔ C3 bothOraclesUntrusted: both Tellor and Chainlink are live and > 5% price difference remain bothOraclesSuspect (47ms)
    ✔ C3 bothOraclesUntrusted: both Tellor and Chainlink are live and > 5% price difference, return last good price (50ms)
    ✔ C3 bothOraclesUntrusted: both Tellor and Chainlink are live and <= 5% price difference, switch to chainlinkWorking (50ms)
    ✔ C3 bothOraclesUntrusted: both Tellor and Chainlink are live and <= 5% price difference, return Chainlink price
    ✔ C4 usingTellorChainlinkFrozen: when both Chainlink and Tellor break, switch to bothOraclesSuspect (38ms)
    ✔ C4 usingTellorChainlinkFrozen: when both Chainlink and Tellor break, return last good price (39ms)
    ✔ C4 usingTellorChainlinkFrozen: when Chainlink breaks and Tellor freezes, switch to usingChainlinkTellorUntrusted (108ms)
    ✔ C4 usingTellorChainlinkFrozen: when Chainlink breaks and Tellor freezes, return last good price (67ms)
    ✔ C4 usingTellorChainlinkFrozen: when Chainlink breaks and Tellor live, switch to usingChainlinkTellorUntrusted (67ms)
    ✔ C4 usingTellorChainlinkFrozen: when Chainlink breaks and Tellor live, return Tellor price (43ms)
    ✔ C4 usingTellorChainlinkFrozen: when Chainlink is live and Tellor is live with <5% price difference, switch back to chainlinkWorking (42ms)
    ✔ C4 usingTellorChainlinkFrozen: when Chainlink is live and Tellor is live with <5% price difference, return Chainlink current price (46ms)
    ✔ C4 usingTellorChainlinkFrozen: when Chainlink is live and Tellor is live with >5% price difference, switch back to usingChainlinkTellorUntrusted (98ms)
    ✔ C4 usingTellorChainlinkFrozen: when Chainlink is live and Tellor is live with >5% price difference, return Chainlink current price (60ms)
    ✔ C4 usingTellorChainlinkFrozen: when Chainlink is live and Tellor is live with similar price, switch back to chainlinkWorking (64ms)
    ✔ C4 usingTellorChainlinkFrozen: when Chainlink is live and Tellor is live with similar price, return Chainlink current price (45ms)
    ✔ C4 usingTellorChainlinkFrozen: when Chainlink is live and Tellor breaks, switch to usingChainlinkTellorUntrusted (51ms)
    ✔ C4 usingTellorChainlinkFrozen: when Chainlink is live and Tellor breaks, return Chainlink current price (48ms)
    ✔ C4 usingTellorChainlinkFrozen: when Chainlink still frozen and Tellor breaks, switch to usingChainlinkTellorUntrusted (95ms)
    ✔ C4 usingTellorChainlinkFrozen: when Chainlink still frozen and Tellor broken, return last good price (69ms)
    ✔ C4 usingTellorChainlinkFrozen: when Chainlink still frozen and Tellor live, remain usingTellorChainlinkFrozen (76ms)
    ✔ C4 usingTellorChainlinkFrozen: when Chainlink still frozen and Tellor live, return Tellor price (105ms)
    ✔ C4 usingTellorChainlinkFrozen: when Chainlink still frozen and Tellor freezes, remain usingTellorChainlinkFrozen (90ms)
    ✔ C4 usingTellorChainlinkFrozen: when Chainlink still frozen and Tellor freezes, return last good price (155ms)
    ✔ C5 usingChainlinkTellorUntrusted: when Chainlink is live and Tellor price >5% - no status change (81ms)
    ✔ C5 usingChainlinkTellorUntrusted: when Chainlink is live and Tellor price >5% - return Chainlink price (70ms)
    ✔ C5 usingChainlinkTellorUntrusted: when Chainlink is live and Tellor price within <5%, switch to chainlinkWorking (51ms)
    ✔ C5 usingChainlinkTellorUntrusted: when Chainlink is live, Tellor price not within 5%, return Chainlink price (53ms)
    ✔ C5 usingChainlinkTellorUntrusted: when Chainlink is live, <50% price deviation from previous, Tellor price not within 5%, remain on usingChainlinkTellorUntrusted (52ms)
    ✔ C5 usingChainlinkTellorUntrusted: when Chainlink is live, <50% price deviation from previous, Tellor price not within 5%, return Chainlink price (99ms)
    ✔ C5 usingChainlinkTellorUntrusted: when Chainlink is live, >50% price deviation from previous, Tellor price not within 5%, remain on usingChainlinkTellorUntrusted (80ms)
    ✔ C5 usingChainlinkTellorUntrusted: when Chainlink is live, >50% price deviation from previous,  Tellor price not within 5%, return Chainlink price (67ms)
    ✔ C5 usingChainlinkTellorUntrusted: when Chainlink is live, <50% price deviation from previous, and Tellor is frozen, remain on usingChainlinkTellorUntrusted (73ms)
    ✔ C5 usingChainlinkTellorUntrusted: when Chainlink is live, <50% price deviation from previous, Tellor is frozen, return Chainlink price (87ms)
    ✔ C5 usingChainlinkTellorUntrusted: when Chainlink is live, >50% price deviation from previous, Tellor is frozen, remain on usingChainlinkTellorUntrusted (112ms)
    ✔ C5 usingChainlinkTellorUntrusted: when Chainlink is live, >50% price deviation from previous, Tellor is frozen, return Chainlink price (117ms)
    ✔ C5 usingChainlinkTellorUntrusted: when Chainlink frozen, remain on usingChainlinkTellorUntrusted (75ms)
    ✔ C5 usingChainlinkTellorUntrusted: when Chainlink frozen, return last good price (64ms)
    ✔ C5 usingChainlinkTellorUntrusted: when Chainlink breaks too, switch to bothOraclesSuspect (63ms)
    ✔ C5 usingChainlinkTellorUntrusted: Chainlink breaks too, return last good price (61ms)
    PriceFeed internal testing contract
      ✔ fetchPrice before setPrice should return the default price
      ✔ should be able to fetchPrice after setPrice, output of former matching input of latter
    Mainnet PriceFeed setup
      ✔ fetchPrice should fail on contract with no chainlink address set
      ✔ fetchPrice should fail on contract with no tellor address set
      ✔ setAddresses should fail whe called by nonOwner
      ✔ setAddresses should fail after address has already been set (48ms)

  Contract: BorrowerWrappers
    ✔ proxy owner can recover ETH (1562ms)
    ✔ non proxy owner cannot recover ETH (1723ms)
    ✔ claimCollateralAndOpenTrove(): reverts if nothing to claim (1873ms)
    3) claimCollateralAndOpenTrove(): without sending any value
    4) claimCollateralAndOpenTrove(): sending value in the transaction
    ✔ claimSPRewardsAndRecycle(): only owner can call it (1910ms)
    5) claimSPRewardsAndRecycle():
    ✔ claimStakingGainsAndRecycle(): only owner can call it (2074ms)
    ✔ claimStakingGainsAndRecycle(): reverts if user has no trove (2077ms)
    6) claimStakingGainsAndRecycle(): with only ETH gain
    ✔ claimStakingGainsAndRecycle(): with only LUSD gain (1770ms)
    7) claimStakingGainsAndRecycle(): with both ETH and LUSD gains

  Contract: SortedTroves
    SortedTroves
      ✔ contains(): returns true for addresses that have opened troves (530ms)
      ✔ contains(): returns false for addresses that have not opened troves (488ms)
      ✔ contains(): returns false for addresses that opened and then closed a trove (673ms)
      ✔ contains(): returns true for addresses that opened, closed and then re-opened a trove (1001ms)
      ✔ contains(): returns false when there are no troves in the system
      ✔ contains(): true when list size is 1 and the trove the only one in system (150ms)
      ✔ contains(): false when list size is 1 and trove is not in the system (268ms)
      ✔ getMaxSize(): Returns the maximum list size
      ✔ Finds the correct insert position given two addresses that loosely bound the correct position (727ms)
      - stays ordered after troves with 'infinite' ICR receive a redistribution
    SortedTroves with mock dependencies
      when params are wrongly set
        ✔ setParams(): reverts if size is zero
      when params are properly set
        ✔ insert(): fails if list is full
        ✔ insert(): fails if list already contains the node
        ✔ insert(): fails if id is zero
        ✔ insert(): fails if NICR is zero
        ✔ remove(): fails if id is not in the list
        ✔ reInsert(): fails if list doesn’t contain the node
        ✔ reInsert(): fails if new NICR is zero (52ms)
        ✔ findInsertPosition(): No prevId for hint - ascend list starting from nextId, result is after the tail

  Contract: StabilityPool Scale Factor issue tests
    Scale Factor issue tests
      8) 1. Liquidation succeeds after P reduced to 1
      ✔ 2. New deposits can be made after P reduced to 1 (902ms)
      ✔ 3. Liquidation succeeds when P == 1 and liquidation has newProductFactor == 1e9 (887ms)
      ✔ 4. Liquidation succeeds when P == 1 and liquidation has newProductFactor > 1e9 (877ms)
      ✔ 5. Depositor have correct depleted stake after deposit at P == 1 and scale changing liq (with newProductFactor == 1e9) (906ms)
      ✔ 6. Depositor have correct depleted stake after deposit at P == 1 and scale changing liq (with newProductFactor > 1e9) (863ms)

  Contract: StabilityPool - LQTY Rewards
    LQTY Rewards
      ✔ liquidation < 1 minute after a deposit does not change totalLQTYIssued (477ms)
      ✔ withdrawFromSP(): reward term G does not update when no LQTY is issued (393ms)
5333319266428568522660000 5333333333333333333333333
      9) withdrawFromSP(): Depositors with equal initial deposit withdraw correct LQTY gain. No liquidations. No front end.
      10) withdrawFromSP(): Depositors with varying initial deposit withdraw correct LQTY gain. No liquidations. No front end.
      11) withdrawFromSP(): Depositors with varying initial deposit withdraw correct LQTY gain. No liquidations. No front end.
      12) withdrawFromSP(): Depositor withdraws correct LQTY gain after serial pool-emptying liquidations. No front-ends.
      ✔ LQTY issuance for a given period is not obtainable if the SP was empty during the period (427ms)
      13) withdrawFromSP(): Several deposits of 100 LUSD span one scale factor change. Depositors withdraw correct LQTY gains
      14) withdrawFromSP(): Depositors with equal initial deposit withdraw correct LQTY gain. No liquidations. Front ends and kickback rates.
      15) withdrawFromSP(): Depositors with varying initial deposit withdraw correct LQTY gain. Front ends and kickback rates
      16) withdrawFromSP(): Several deposits of 10k LUSD span one scale factor change. Depositors withdraw correct LQTY gains

  Contract: Pool Manager: Sum-Product rounding errors
    - Rounding errors: 100 deposits of 100LUSD into SP, then 200 liquidations of 49LUSD

  Contract: StabilityPool - Withdrawal of stability deposit - Reward calculations
    Stability Pool Withdrawal
      ✔ withdrawFromSP(): Depositors with equal initial deposit withdraw correct compounded deposit and ETH Gain after one liquidation (417ms)
      ✔ withdrawFromSP(): Depositors with equal initial deposit withdraw correct compounded deposit and ETH Gain after two identical liquidations (602ms)
      ✔ withdrawFromSP():  Depositors with equal initial deposit withdraw correct compounded deposit and ETH Gain after three identical liquidations (751ms)
      ✔ withdrawFromSP(): Depositors with equal initial deposit withdraw correct compounded deposit and ETH Gain after two liquidations of increasing LUSD (668ms)
      ✔ withdrawFromSP(): Depositors with equal initial deposit withdraw correct compounded deposit and ETH Gain after three liquidations of increasing LUSD (786ms)
      ✔ withdrawFromSP(): Depositors with varying deposits withdraw correct compounded deposit and ETH Gain after two identical liquidations (612ms)
      ✔ withdrawFromSP(): Depositors with varying deposits withdraw correct compounded deposit and ETH Gain after three identical liquidations (779ms)
      ✔ withdrawFromSP(): Depositors with varying deposits withdraw correct compounded deposit and ETH Gain after three varying liquidations (1329ms)

      ✔ withdrawFromSP(): A, B, C Deposit -> 2 liquidations -> D deposits -> 1 liquidation. All deposits and liquidations = 100 LUSD.  A, B, C, D withdraw correct LUSD deposit and ETH Gain (815ms)
      ✔ withdrawFromSP(): A, B, C Deposit -> 2 liquidations -> D deposits -> 2 liquidations. All deposits and liquidations = 100 LUSD.  A, B, C, D withdraw correct LUSD deposit and ETH Gain (984ms)
      ✔ withdrawFromSP(): A, B, C Deposit -> 2 liquidations -> D deposits -> 2 liquidations. Various deposit and liquidation vals.  A, B, C, D withdraw correct LUSD deposit and ETH Gain (1032ms)
      ✔ withdrawFromSP(): A, B, C, D deposit -> 2 liquidations -> D withdraws -> 2 liquidations. All deposits and liquidations = 100 LUSD.  A, B, C, D withdraw correct LUSD deposit and ETH Gain (1036ms)
      ✔ withdrawFromSP(): A, B, C, D deposit -> 2 liquidations -> D withdraws -> 2 liquidations. Various deposit and liquidation vals. A, B, C, D withdraw correct LUSD deposit and ETH Gain (1060ms)
      ✔ withdrawFromSP(): A, B, D deposit -> 2 liquidations -> C makes deposit -> 1 liquidation -> D withdraws -> 1 liquidation. All deposits: 100 LUSD. Liquidations: 100,100,100,50.  A, B, C, D withdraw correct LUSD deposit and ETH Gain (1755ms)
      ✔ withdrawFromSP(): Depositor withdraws correct compounded deposit after liquidation empties the pool (729ms)
      ✔ withdrawFromSP(): Pool-emptying liquidation increases epoch by one, resets scaleFactor to 0, and resets P to 1e18 (990ms)
      ✔ withdrawFromSP(): Depositors withdraw correct compounded deposit after liquidation empties the pool (756ms)
      ✔ withdrawFromSP(): single deposit fully offset. After subsequent liquidations, depositor withdraws 0 deposit and *only* the ETH Gain from one liquidation (691ms)
      ✔ withdrawFromSP(): Depositor withdraws correct compounded deposit after liquidation empties the pool (1358ms)
      ✔ withdrawFromSP(): deposit spans one scale factor change: Single depositor withdraws correct compounded deposit and ETH Gain after one liquidation (593ms)
      ✔ withdrawFromSP(): Several deposits of varying amounts span one scale factor change. Depositors withdraw correct compounded deposit and ETH Gain after one liquidation (790ms)
      ✔ withdrawFromSP(): deposit spans one scale factor change: Single depositor withdraws correct compounded deposit and ETH Gain after one liquidation (674ms)
      ✔ withdrawFromSP(): Several deposits of varying amounts span one scale factor change. Depositors withdraws correct compounded deposit and ETH Gain after one liquidation (678ms)
alice deposit: 0
      ✔ withdrawFromSP(): Deposit that decreases to less than 1e-9 of it's original value is reduced to 0 (254ms)
      ✔ withdrawFromSP(): Several deposits of 10000 LUSD span one scale factor change. Depositors withdraws correct compounded deposit and ETH Gain after one liquidation (1064ms)
      ✔ withdrawFromSP(): 2 depositors can withdraw after each receiving half of a pool-emptying liquidation (1108ms)
      ✔ withdrawFromSP(): Depositor's ETH gain stops increasing after two scale changes (1776ms)
      ✔ withdrawFromSP(): Large liquidated coll/debt, deposits and ETH price (559ms)
      ✔ withdrawFromSP(): Small liquidated coll/debt, large deposits and ETH price (550ms)

  Contract: StabilityPool - Withdrawal of stability deposit - Reward calculations
    Stability Pool Withdrawal
      ✔ withdrawETHGainToTrove(): Depositors with equal initial deposit withdraw correct compounded deposit and ETH Gain after one liquidation (930ms)
      ✔ withdrawETHGainToTrove(): Depositors with equal initial deposit withdraw correct compounded deposit and ETH Gain after two identical liquidations (1061ms)
      ✔ withdrawETHGainToTrove():  Depositors with equal initial deposit withdraw correct compounded deposit and ETH Gain after three identical liquidations (1247ms)
      ✔ withdrawETHGainToTrove(): Depositors with equal initial deposit withdraw correct compounded deposit and ETH Gain after two liquidations of increasing LUSD (1050ms)
      ✔ withdrawETHGainToTrove(): Depositors with equal initial deposit withdraw correct compounded deposit and ETH Gain after three liquidations of increasing LUSD (1185ms)
      ✔ withdrawETHGainToTrove(): Depositors with varying deposits withdraw correct compounded deposit and ETH Gain after two identical liquidations (1005ms)
      ✔ withdrawETHGainToTrove(): Depositors with varying deposits withdraw correct compounded deposit and ETH Gain after three identical liquidations (1219ms)
      ✔ withdrawETHGainToTrove(): Depositors with varying deposits withdraw correct compounded deposit and ETH Gain after three varying liquidations (1149ms)

      ✔ withdrawETHGainToTrove(): A, B, C Deposit -> 2 liquidations -> D deposits -> 1 liquidation. All deposits and liquidations = 100 LUSD.  A, B, C, D withdraw correct LUSD deposit and ETH Gain (1364ms)
      ✔ withdrawETHGainToTrove(): A, B, C Deposit -> 2 liquidations -> D deposits -> 2 liquidations. All deposits and liquidations = 100 LUSD.  A, B, C, D withdraw correct LUSD deposit and ETH Gain (2141ms)
      ✔ withdrawETHGainToTrove(): A, B, C Deposit -> 2 liquidations -> D deposits -> 2 liquidations. Various deposit and liquidation vals.  A, B, C, D withdraw correct LUSD deposit and ETH Gain (1600ms)
      ✔ withdrawETHGainToTrove(): A, B, C, D deposit -> 2 liquidations -> D withdraws -> 2 liquidations. All deposits and liquidations = 100 LUSD.  A, B, C, D withdraw correct LUSD deposit and ETH Gain (1546ms)
      ✔ withdrawETHGainToTrove(): A, B, C, D deposit -> 2 liquidations -> D withdraws -> 2 liquidations. Various deposit and liquidation vals. A, B, C, D withdraw correct LUSD deposit and ETH Gain (1349ms)
      ✔ withdrawETHGainToTrove(): A, B, D deposit -> 2 liquidations -> C makes deposit -> 1 liquidation -> D withdraws -> 1 liquidation. All deposits: 100 LUSD. Liquidations: 100,100,100,50.  A, B, C, D withdraw correct LUSD deposit and ETH Gain (1374ms)
      ✔ withdrawETHGainToTrove(): Depositor withdraws correct compounded deposit after liquidation empties the pool (1756ms)
      ✔ withdrawETHGainToTrove(): Pool-emptying liquidation increases epoch by one, resets scaleFactor to 0, and resets P to 1e18 (1278ms)
      ✔ withdrawETHGainToTrove(): Depositors withdraw correct compounded deposit after liquidation empties the pool (1317ms)
      ✔ withdrawETHGainToTrove(): single deposit fully offset. After subsequent liquidations, depositor withdraws 0 deposit and *only* the ETH Gain from one liquidation (1001ms)
      ✔ withdrawETHGainToTrove(): Depositor withdraws correct compounded deposit after liquidation empties the pool (2229ms)
      ✔ withdrawETHGainToTrove(): deposit spans one scale factor change: Single depositor withdraws correct compounded deposit and ETH Gain after one liquidation (768ms)
      ✔ withdrawETHGainToTrove(): Several deposits of varying amounts span one scale factor change. Depositors withdraw correct compounded deposit and ETH Gain after one liquidation (1112ms)
      ✔ withdrawETHGainToTrove(): deposit spans one scale factor change: Single depositor withdraws correct compounded deposit and ETH Gain after one liquidation (769ms)
      ✔ withdrawETHGainToTrove(): Several deposits of varying amounts span one scale factor change. Depositors withdraws correct compounded deposit and ETH Gain after one liquidation (1202ms)
alice deposit: 0
      ✔ withdrawETHGainToTrove(): Deposit that decreases to less than 1e-9 of it's original value is reduced to 0 (534ms)
      ✔ withdrawETHGainToTrove(): Several deposits of 10000 LUSD span one scale factor change. Depositors withdraws correct compounded deposit and ETH Gain after one liquidation (1543ms)
      ✔ withdrawETHGainToTrove(): 2 depositors can withdraw after each receiving half of a pool-emptying liquidation (2550ms)
      ✔ withdrawETHGainToTrove(): Large liquidated coll/debt, deposits and ETH price (590ms)
      ✔ withdrawETHGainToTrove(): Small liquidated coll/debt, large deposits and ETH price (432ms)

  Contract: StabilityPool
    Stability Pool Mechanisms
      ✔ provideToSP(): increases the Stability Pool LUSD balance (117ms)
      ✔ provideToSP(): updates the user's deposit record in StabilityPool (179ms)
      ✔ provideToSP(): reduces the user's LUSD balance by the correct amount (166ms)
      ✔ provideToSP(): increases totalLUSDDeposits by correct amount (168ms)
      ✔ provideToSP(): Correctly updates user snapshots of accumulated rewards per unit staked (674ms)
      ✔ provideToSP(), multiple deposits: updates user's deposit and snapshots (1086ms)
      ✔ provideToSP(): reverts if user tries to provide more than their LUSD balance (458ms)
      ✔ provideToSP(): reverts if user tries to provide 2^256-1 LUSD, which exceeds their balance (369ms)
      17) provideToSP(): reverts if cannot receive ETH Gain
      ✔ provideToSP(): doesn't impact other users' deposits or ETH gains (1153ms)
      ✔ provideToSP(): doesn't impact system debt, collateral or TCR (1113ms)
      ✔ provideToSP(): doesn't impact any troves, including the caller's trove (767ms)
      ✔ provideToSP(): doesn't protect the depositor's trove from liquidation (711ms)
      ✔ provideToSP(): providing 0 LUSD reverts (529ms)
      ✔ provideToSP(), new deposit: when SP > 0, triggers LQTY reward event - increases the sum G (406ms)
      ✔ provideToSP(), new deposit: when SP is empty, doesn't update G (554ms)
      ✔ provideToSP(), new deposit: sets the correct front end tag (749ms)
      ✔ provideToSP(), new deposit: depositor does not receive any LQTY rewards (348ms)
      ✔ provideToSP(), new deposit after past full withdrawal: depositor does not receive any LQTY rewards (1104ms)
      ✔ provideToSP(), new eligible deposit: tagged front end receives LQTY rewards (1033ms)
      ✔ provideToSP(), new eligible deposit: tagged front end's stake increases (478ms)
      ✔ provideToSP(), new eligible deposit: tagged front end's snapshots update (995ms)
      ✔ provideToSP(), new deposit: depositor does not receive ETH gains (538ms)
      ✔ provideToSP(), new deposit after past full withdrawal: depositor does not receive ETH gains (1039ms)
      ✔ provideToSP(), topup: triggers LQTY reward event - increases the sum G (628ms)
      ✔ provideToSP(), topup from different front end: doesn't change the front end tag (888ms)
      ✔ provideToSP(), topup: depositor receives LQTY rewards (638ms)
      ✔ provideToSP(), topup: tagged front end receives LQTY rewards (704ms)
      ✔ provideToSP(), topup: tagged front end's stake increases (1095ms)
      ✔ provideToSP(), topup: tagged front end's snapshots update (1118ms)
      ✔ provideToSP(): reverts when amount is zero (411ms)
      ✔ provideToSP(): reverts if user is a registered front end (576ms)
      ✔ provideToSP(): reverts if provided tag is not a registered front end (417ms)
      ✔ withdrawFromSP(): reverts when user has no active deposit (382ms)
      ✔ withdrawFromSP(): reverts when amount > 0 and system has an undercollateralized trove (304ms)
      ✔ withdrawFromSP(): partial retrieval - retrieves correct LUSD amount and the entire ETH Gain, and updates deposit (678ms)
      ✔ withdrawFromSP(): partial retrieval - leaves the correct amount of LUSD in the Stability Pool (672ms)
      ✔ withdrawFromSP(): full retrieval - leaves the correct amount of LUSD in the Stability Pool (812ms)
      ✔ withdrawFromSP(): Subsequent deposit and withdrawal attempt from same account, with no intermediate liquidations, withdraws zero ETH (976ms)
      ✔ withdrawFromSP(): it correctly updates the user's LUSD and ETH snapshots of entitled reward per unit staked (744ms)
      ✔ withdrawFromSP(): decreases StabilityPool ETH (701ms)
      ✔ withdrawFromSP(): All depositors are able to withdraw from the SP to their account (1430ms)
      ✔ withdrawFromSP(): increases depositor's LUSD token balance by the expected amount (1230ms)
      ✔ withdrawFromSP(): doesn't impact other users Stability deposits or ETH gains (1818ms)
      ✔ withdrawFromSP(): doesn't impact system debt, collateral or TCR  (1084ms)
      ✔ withdrawFromSP(): doesn't impact any troves, including the caller's trove (814ms)
      18) withdrawFromSP(): succeeds when amount is 0 and system has an undercollateralized trove
      ✔ withdrawFromSP(): withdrawing 0 LUSD doesn't alter the caller's deposit or the total LUSD in the Stability Pool (646ms)
      ✔ withdrawFromSP(): withdrawing 0 ETH Gain does not alter the caller's ETH balance, their trove collateral, or the ETH  in the Stability Pool (863ms)
      ✔ withdrawFromSP(): Request to withdraw > caller's deposit only withdraws the caller's compounded deposit (785ms)
      ✔ withdrawFromSP(): Request to withdraw 2^256-1 LUSD only withdraws the caller's compounded deposit (1682ms)
      ✔ withdrawFromSP(): caller can withdraw full deposit and ETH gain during Recovery Mode (913ms)
      ✔ getDepositorETHGain(): depositor does not earn further ETH gains from liquidations while their compounded deposit == 0:  (1616ms)
      ✔ withdrawFromSP(): triggers LQTY reward event - increases the sum G (715ms)
      ✔ withdrawFromSP(), partial withdrawal: doesn't change the front end tag (969ms)
      ✔ withdrawFromSP(), partial withdrawal: depositor receives LQTY rewards (604ms)
      ✔ withdrawFromSP(), partial withdrawal: tagged front end receives LQTY rewards (900ms)
      ✔ withdrawFromSP(), partial withdrawal: tagged front end's stake decreases (1164ms)
      ✔ withdrawFromSP(), partial withdrawal: tagged front end's snapshots update (1203ms)
      ✔ withdrawFromSP(), full withdrawal: removes deposit's front end tag (823ms)
      ✔ withdrawFromSP(), full withdrawal: zero's depositor's snapshots (1377ms)
      ✔ withdrawFromSP(), full withdrawal that reduces front end stake to 0: zero’s the front end’s snapshots (1011ms)
      ✔ withdrawFromSP(), reverts when initial deposit value is 0 (578ms)
      ✔ withdrawETHGainToTrove(): reverts when user has no active deposit (836ms)
      ✔ withdrawETHGainToTrove(): Applies LUSDLoss to user's deposit, and redirects ETH reward to user's Trove (489ms)
      ✔ withdrawETHGainToTrove(): reverts if it would leave trove with ICR < MCR (642ms)
      ✔ withdrawETHGainToTrove(): Subsequent deposit and withdrawal attempt from same account, with no intermediate liquidations, withdraws zero ETH (627ms)
      ✔ withdrawETHGainToTrove(): decreases StabilityPool ETH and increases activePool ETH (670ms)
      ✔ withdrawETHGainToTrove(): All depositors are able to withdraw their ETH gain from the SP to their Trove (1795ms)
      ✔ withdrawETHGainToTrove(): All depositors withdraw, each withdraw their correct ETH gain (2827ms)
      ✔ withdrawETHGainToTrove(): caller can withdraw full deposit and ETH gain to their trove during Recovery Mode (1456ms)
      ✔ withdrawETHGainToTrove(): reverts if user has no trove (787ms)
      ✔ withdrawETHGainToTrove(): triggers LQTY reward event - increases the sum G (879ms)
      ✔ withdrawETHGainToTrove(), partial withdrawal: doesn't change the front end tag (1122ms)
      ✔ withdrawETHGainToTrove(), eligible deposit: depositor receives LQTY rewards (1050ms)
      ✔ withdrawETHGainToTrove(), eligible deposit: tagged front end receives LQTY rewards (1043ms)
      ✔ withdrawETHGainToTrove(), eligible deposit: tagged front end's stake decreases (1595ms)
      ✔ withdrawETHGainToTrove(), eligible deposit: tagged front end's snapshots update (1345ms)
      ✔ withdrawETHGainToTrove(): reverts when depositor has no ETH gain (764ms)
      ✔ registerFrontEnd(): registers the front end and chosen kickback rate (87ms)
      ✔ registerFrontEnd(): reverts if the front end is already registered
      ✔ registerFrontEnd(): reverts if the kickback rate >1
      ✔ registerFrontEnd(): reverts if address has a non-zero deposit already (282ms)

  Contract: TroveManager
totalStakesSnapshot after L1: 200000002000000000000000000000
totalCollateralSnapshot after L1: 399000002000000000000000000000
Snapshots ratio after L1: 501253135332064484
B pending ETH reward after L1: 39799999602000003960000000000
B stake after L1: 40000000000000000000000000000
B stake after A1: 39999999999999999989974957243
Snapshots ratio after A1: 501253135332064484
B stake after L2: 39999999999999999989974957243
Snapshots ratio after L2: 501253134833317619
B stake after A2: 39999999999999999983267686056
B stake after L3: 39999999999999999983267686056
Snapshots ratio after L3: 501253134334570755
B stake after A3: 39999999999999999978023472178
B stake after L4: 39999999999999999978023472178
Snapshots ratio after L4: 501253133835823890
B stake after A4: 39999999999999999993921497875
B stake after L5: 39999999999999999993921497875
Snapshots ratio after L5: 501253133337077025
B stake after A5: 39999999999999999994797348633
B stake after L6: 39999999999999999994797348633
Snapshots ratio after L6: 501253132838330161
B stake after A6: 39999999999999999993468266716
B stake after L7: 39999999999999999993468266716
Snapshots ratio after L7: 501253132339583296
B stake after A7: 39999999999999999992497700314
B stake after L8: 39999999999999999992497700314
Snapshots ratio after L8: 501253131840836431
B stake after A8: 39999999999999999992398338824
B stake after L9: 39999999999999999992398338824
Snapshots ratio after L9: 501253131342089567
B stake after A9: 39999999999999999993272719884
B stake after L10: 39999999999999999993272719884
Snapshots ratio after L10: 501253130843342702
B stake after A10: 39999999999999999995141350785
B stake after L11: 39999999999999999995141350785
Snapshots ratio after L11: 501253130344595837
B stake after A11: 39999999999999999998008332745
    ✔ A given trove's stake decline is negligible with adjustments and tiny liquidations (3767ms)

  Contract: TroveManager - Redistribution reward calculations
    ✔ redistribution: A, B Open. B Liquidated. C, D Open. D Liquidated. Distributes correct rewards (629ms)
    ✔ redistribution: A, B, C Open. C Liquidated. D, E, F Open. F Liquidated. Distributes correct rewards (1034ms)
    ✔ redistribution: Sequence of alternate opening/liquidation: final surviving trove has ETH from all previously liquidated troves (1197ms)
    ✔ redistribution: A,B,C,D,E open. Liq(A). B adds coll. Liq(C). B and D have correct coll and debt (1298ms)
    ✔ redistribution: A,B,C,D open. Liq(A). B adds coll. Liq(C). B and D have correct coll and debt (1472ms)
    ✔ redistribution: A,B,C Open. Liq(C). B adds coll. Liq(A). B acquires all coll and debt (747ms)
    ✔ redistribution: A,B,C Open. Liq(C). B tops up coll. D Opens. Liq(D). Distributes correct rewards. (844ms)
    ✔ redistribution: Trove with the majority stake tops up. A,B,C, D open. Liq(D). C tops up. E Enters, Liq(E). Distributes correct rewards (967ms)
    ✔ redistribution: Trove with the majority stake tops up. A,B,C, D open. Liq(D). A, B, C top up. E Enters, Liq(E). Distributes correct rewards (1095ms)
    ✔ redistribution: A,B,C Open. Liq(C). B withdraws coll. Liq(A). B acquires all coll and debt (756ms)
    ✔ redistribution: A,B,C Open. Liq(C). B withdraws coll. D Opens. Liq(D). Distributes correct rewards. (885ms)
    ✔ redistribution: Trove with the majority stake withdraws. A,B,C,D open. Liq(D). C withdraws some coll. E Enters, Liq(E). Distributes correct rewards (959ms)
    ✔ redistribution: Trove with the majority stake withdraws. A,B,C,D open. Liq(D). A, B, C withdraw. E Enters, Liq(E). Distributes correct rewards (1119ms)
    ✔ redistribution, all operations: A,B,C open. Liq(A). D opens. B adds, C withdraws. Liq(B). E & F open. D adds. Liq(F). Distributes correct rewards (1351ms)
    ✔ redistribution, all operations: A,B,C open. Liq(A). D opens. B adds, C withdraws. Liq(B). E & F open. D adds. Liq(F). Varying coll. Distributes correct rewards (1224ms)

  Contract: TroveManager - in Recovery Mode - back to normal mode in 1 tx
    Batch liquidations
      ✔ First trove only doesn’t get out of Recovery Mode (678ms)
      ✔ Two troves over MCR are liquidated (685ms)
      ✔ Stability Pool profit matches (482ms)
      ✔ A trove over TCR is not liquidated (660ms)
    Sequential liquidations
      ✔ First trove only doesn’t get out of Recovery Mode (586ms)
      ✔ Two troves over MCR are liquidated (691ms)

  Contract: TroveManager - in Recovery Mode
    ✔ checkRecoveryMode(): Returns true if TCR falls below CCR (239ms)
    ✔ checkRecoveryMode(): Returns true if TCR stays less than CCR (267ms)
    ✔ checkRecoveryMode(): returns false if TCR stays above CCR (468ms)
    ✔ checkRecoveryMode(): returns false if TCR rises above CCR (322ms)
    ✔ liquidate(), with ICR < 100%: removes stake and updates totalStakes (334ms)
    ✔ liquidate(), with ICR < 100%: updates system snapshots correctly (608ms)
    ✔ liquidate(), with ICR < 100%: closes the Trove and removes it from the Trove array (387ms)
    ✔ liquidate(), with ICR < 100%: only redistributes to active Troves - no offset to Stability Pool (329ms)
    ✔ liquidate(), with 100 < ICR < 110%: removes stake and updates totalStakes (686ms)
    ✔ liquidate(), with 100% < ICR < 110%: updates system snapshots correctly (462ms)
    ✔ liquidate(), with 100% < ICR < 110%: closes the Trove and removes it from the Trove array (813ms)
    ✔ liquidate(), with 100% < ICR < 110%: offsets as much debt as possible with the Stability Pool, then redistributes the remainder coll and debt (653ms)
    ✔ liquidate(), with ICR > 110%, trove has lowest ICR, and StabilityPool is empty: does nothing (615ms)
    ✔ liquidate(), with 110% < ICR < TCR, and StabilityPool LUSD > debt to liquidate: offsets the trove entirely with the pool (619ms)
    ✔ liquidate(), with ICR% = 110 < TCR, and StabilityPool LUSD > debt to liquidate: offsets the trove entirely with the pool, there’s no collateral surplus (385ms)
    ✔ liquidate(), with  110% < ICR < TCR, and StabilityPool LUSD > debt to liquidate: removes stake and updates totalStakes (519ms)
    ✔ liquidate(), with  110% < ICR < TCR, and StabilityPool LUSD > debt to liquidate: updates system snapshots (687ms)
    ✔ liquidate(), with 110% < ICR < TCR, and StabilityPool LUSD > debt to liquidate: closes the Trove (454ms)
    ✔ liquidate(), with 110% < ICR < TCR, and StabilityPool LUSD > debt to liquidate: can liquidate troves out of order (1533ms)
    ✔ liquidate(), with ICR > 110%, and StabilityPool LUSD < liquidated debt: Trove remains active (488ms)
    ✔ liquidate(), with ICR > 110%, and StabilityPool LUSD < liquidated debt: Trove remains in TroveOwners array (558ms)
    ✔ liquidate(), with ICR > 110%, and StabilityPool LUSD < liquidated debt: nothing happens (279ms)
    ✔ liquidate(), with ICR > 110%, and StabilityPool LUSD < liquidated debt: updates system shapshots (300ms)
    ✔ liquidate(), with ICR > 110%, and StabilityPool LUSD < liquidated debt: causes correct Pool offset and ETH gain, and doesn't redistribute to active troves (682ms)
    ✔ liquidate(), with ICR > 110%, and StabilityPool LUSD < liquidated debt: ICR of non liquidated trove does not change (1004ms)
    ✔ liquidate() with ICR > 110%, and StabilityPool LUSD < liquidated debt: total liquidated coll and debt is correct (873ms)
    ✔ liquidate(): Doesn't liquidate undercollateralized trove if it is the only trove in the system (387ms)
    ✔ liquidate(): Liquidates undercollateralized trove if there are two troves in the system (529ms)
    ✔ liquidate(): does nothing if trove has >= 110% ICR and the Stability Pool is empty (386ms)
    ✔ liquidate(): does nothing if trove ICR >= TCR, and SP covers trove's debt (402ms)
    ✔ liquidate(): reverts if trove is non-existent (617ms)
    ✔ liquidate(): reverts if trove has been closed (331ms)
    ✔ liquidate(): liquidates based on entire/collateral debt (including pending rewards), not raw collateral/debt (946ms)
    ✔ liquidate(): does not affect the SP deposit or ETH gain when called on an SP depositor's address that has no trove (309ms)
    ✔ liquidate(): does not alter the liquidated user's token balance (812ms)
    ✔ liquidate(), with 110% < ICR < TCR, can claim collateral, re-open, be reedemed and claim again (1284ms)
    ✔ liquidate(), with 110% < ICR < TCR, can claim collateral, after another claim from a redemption (2462ms)
    ✔ liquidateTroves(): With all ICRs > 110%, Liquidates Troves until system leaves recovery mode (1405ms)
    ✔ liquidateTroves(): Liquidates Troves until 1) system has left recovery mode AND 2) it reaches a Trove with ICR >= 110% (1045ms)
    ✔ liquidateTroves(): liquidates only up to the requested number of undercollateralized troves (861ms)
    ✔ liquidateTroves(): does nothing if n = 0 (593ms)
    ✔ liquidateTroves(): closes every Trove with ICR < MCR, when n > number of undercollateralized troves (1080ms)
    ✔ liquidateTroves(): a liquidation sequence containing Pool offsets increases the TCR (2386ms)
    ✔ liquidateTroves(): A liquidation sequence of pure redistributions decreases the TCR, due to gas compensation, but up to 0.5% (1150ms)
    ✔ liquidateTroves(): liquidates based on entire/collateral debt (including pending rewards), not raw collateral/debt (713ms)
    ✔ liquidateTroves(): does nothing if all troves have ICR > 110% and Stability Pool is empty (629ms)
    ✔ liquidateTroves(): emits liquidation event with correct values when all troves have ICR > 110% and Stability Pool covers a subset of troves (985ms)
    ✔ liquidateTroves():  emits liquidation event with correct values when all troves have ICR > 110% and Stability Pool covers a subset of troves, including a partial (1034ms)
    ✔ liquidateTroves(): does not affect the liquidated user's token balances (708ms)
    ✔ liquidateTroves(): Liquidating troves at 100 < ICR < 110 with SP deposits correctly impacts their SP deposit and ETH gain (906ms)
    ✔ liquidateTroves(): Liquidating troves at ICR <=100% with SP deposits does not alter their deposit or ETH gain (924ms)
    ✔ liquidateTroves() with a non fullfilled liquidation: non liquidated trove remains active (940ms)
    ✔ liquidateTroves() with a non fullfilled liquidation: non liquidated trove remains in TroveOwners Array (940ms)
gasUsed:  753820
true
    ✔ liquidateTroves() with a non fullfilled liquidation: still can liquidate further troves after the non-liquidated, emptied pool (918ms)
gasUsed:  753820
    ✔ liquidateTroves() with a non fullfilled liquidation: still can liquidate further troves after the non-liquidated, non emptied pool (949ms)
    ✔ liquidateTroves() with a non fullfilled liquidation: total liquidated coll and debt is correct (771ms)
    ✔ liquidateTroves() with a non fullfilled liquidation: emits correct liquidation event values (1028ms)
    ✔ liquidateTroves() with a non fullfilled liquidation: ICR of non liquidated trove does not change (875ms)
    ✔ batchLiquidateTroves(): Liquidates all troves with ICR < 110%, transitioning Normal -> Recovery Mode (1060ms)
    ✔ batchLiquidateTroves(): Liquidates all troves with ICR < 110%, transitioning Recovery -> Normal Mode (1028ms)
    ✔ batchLiquidateTroves(): Liquidates all troves with ICR < 110%, transitioning Normal -> Recovery Mode (1198ms)
    ✔ batchLiquidateTroves() with a non fullfilled liquidation: non liquidated trove remains active (933ms)
    ✔ batchLiquidateTroves() with a non fullfilled liquidation: non liquidated trove remains in Trove Owners array (965ms)
gasUsed:  765925
    ✔ batchLiquidateTroves() with a non fullfilled liquidation: still can liquidate further troves after the non-liquidated, emptied pool (976ms)
gasUsed:  765925
    ✔ batchLiquidateTroves() with a non fullfilled liquidation: still can liquidate further troves after the non-liquidated, non emptied pool (953ms)
    ✔ batchLiquidateTroves() with a non fullfilled liquidation: total liquidated coll and debt is correct (772ms)
    ✔ batchLiquidateTroves() with a non fullfilled liquidation: emits correct liquidation event values (951ms)
    ✔ batchLiquidateTroves() with a non fullfilled liquidation: ICR of non liquidated trove does not change (868ms)
    ✔ batchLiquidateTroves(), with 110% < ICR < TCR, and StabilityPool LUSD > debt to liquidate: can liquidate troves out of order (1014ms)
    ✔ batchLiquidateTroves(), with 110% < ICR < TCR, and StabilityPool empty: doesn't liquidate any troves (804ms)
    ✔ batchLiquidateTroves(): skips liquidation of troves with ICR > TCR, regardless of Stability Pool size (1705ms)
    ✔ batchLiquidateTroves(): emits liquidation event with correct values when all troves have ICR > 110% and Stability Pool covers a subset of troves (1062ms)
    ✔ batchLiquidateTroves(): emits liquidation event with correct values when all troves have ICR > 110% and Stability Pool covers a subset of troves, including a partial (1401ms)

  Contract: TroveManager
    ✔ liquidate(): closes a Trove that has ICR < MCR (606ms)
    ✔ liquidate(): decreases ActivePool ETH and LUSDDebt by correct amounts (262ms)
    ✔ liquidate(): increases DefaultPool ETH and LUSD debt by correct amounts (237ms)
    ✔ liquidate(): removes the Trove's stake from the total stakes (250ms)
    ✔ liquidate(): Removes the correct trove from the TroveOwners array, and moves the last array element to the new empty slot (879ms)
    ✔ liquidate(): updates the snapshots of total stakes and total collateral (279ms)
    ✔ liquidate(): updates the L_ETH and L_LUSDDebt reward-per-unit-staked totals (908ms)
    ✔ liquidate(): Liquidates undercollateralized trove if there are two troves in the system (292ms)
    ✔ liquidate(): reverts if trove is non-existent (196ms)
    ✔ liquidate(): reverts if trove has been closed (608ms)
    ✔ liquidate(): does nothing if trove has >= 110% ICR (432ms)
    ✔ liquidate(): Given the same price and no other trove changes, complete Pool offsets restore the TCR to its value prior to the defaulters opening troves (1870ms)
    ✔ liquidate(): Pool offsets increase the TCR (1730ms)
    ✔ liquidate(): a pure redistribution reduces the TCR only as a result of compensation (1505ms)
    ✔ liquidate(): does not affect the SP deposit or ETH gain when called on an SP depositor's address that has no trove (630ms)
    ✔ liquidate(): does not liquidate a SP depositor's trove with ICR > 110%, and does not affect their SP deposit or ETH gain (542ms)
    ✔ liquidate(): liquidates a SP depositor's trove with ICR < 110%, and the liquidation correctly impacts their SP deposit and ETH gain (901ms)
    ✔ liquidate(): does not alter the liquidated user's token balance (548ms)
    ✔ liquidate(): liquidates based on entire/collateral debt (including pending rewards), not raw collateral/debt (1016ms)
    ✔ liquidate(): when SP > 0, triggers LQTY reward event - increases the sum G (824ms)
    ✔ liquidate(): when SP is empty, doesn't update G (692ms)
    ✔ liquidateTroves(): liquidates a Trove that a) was skipped in a previous liquidation and b) has pending rewards (1522ms)
    ✔ liquidateTroves(): closes every Trove with ICR < MCR, when n > number of undercollateralized troves (1295ms)
    ✔ liquidateTroves(): liquidates  up to the requested number of undercollateralized troves (658ms)
    ✔ liquidateTroves(): does nothing if all troves have ICR > 110% (688ms)
    ✔ liquidateTroves(): liquidates based on entire/collateral debt (including pending rewards), not raw collateral/debt (687ms)
    ✔ liquidateTroves(): reverts if n = 0 (715ms)
    ✔ liquidateTroves():  liquidates troves with ICR < MCR (1077ms)
    ✔ liquidateTroves(): does not affect the liquidated user's token balances (452ms)
    ✔ liquidateTroves(): A liquidation sequence containing Pool offsets increases the TCR (1615ms)
    ✔ liquidateTroves(): A liquidation sequence of pure redistributions decreases the TCR, due to gas compensation, but up to 0.5% (1220ms)
    ✔ liquidateTroves(): Liquidating troves with SP deposits correctly impacts their SP deposit and ETH gain (586ms)
    ✔ liquidateTroves(): when SP > 0, triggers LQTY reward event - increases the sum G (956ms)
    ✔ liquidateTroves(): when SP is empty, doesn't update G (980ms)
    ✔ batchLiquidateTroves(): liquidates a Trove that a) was skipped in a previous liquidation and b) has pending rewards (1243ms)
    ✔ batchLiquidateTroves(): closes every trove with ICR < MCR in the given array (981ms)
    ✔ batchLiquidateTroves(): does not liquidate troves that are not in the given array (840ms)
    ✔ batchLiquidateTroves(): does not close troves with ICR >= MCR in the given array (977ms)
    ✔ batchLiquidateTroves(): reverts if array is empty (813ms)
    ✔ batchLiquidateTroves(): skips if trove is non-existent (2213ms)
    ✔ batchLiquidateTroves(): skips if a trove has been closed (1123ms)
    ✔ batchLiquidateTroves: when SP > 0, triggers LQTY reward event - increases the sum G (1491ms)
    ✔ batchLiquidateTroves(): when SP is empty, doesn't update G (1025ms)
    ✔ getRedemptionHints(): gets the address of the first Trove and the final ICR of the last Trove involved in a redemption (516ms)
    ✔ getRedemptionHints(): returns 0 as partialRedemptionHintNICR when reaching _maxIterations (576ms)
    ✔ redeemCollateral(): cancels the provided LUSD with debt from Troves with the lowest ICRs and sends an equivalent amount of Ether (936ms)
    ✔ redeemCollateral(): with invalid first hint, zero address (888ms)
    ✔ redeemCollateral(): with invalid first hint, non-existent trove (477ms)
    ✔ redeemCollateral(): with invalid first hint, trove below MCR (898ms)
    ✔ redeemCollateral(): ends the redemption sequence when the token redemption request has been filled (987ms)
    ✔ redeemCollateral(): ends the redemption sequence when max iterations have been reached (630ms)
    ✔ redeemCollateral(): performs partial redemption if resultant debt is > minimum net debt (803ms)
    ✔ redeemCollateral(): doesn't perform partial redemption if resultant debt would be < minimum net debt (717ms)
    ✔ redeemCollateral(): doesnt perform the final partial redemption in the sequence if the hint is out-of-date (853ms)
    - redeemCollateral(): can redeem if there is zero active debt but non-zero debt in DefaultPool
    ✔ redeemCollateral(): doesn't touch Troves with ICR < 110% (299ms)
    ✔ redeemCollateral(): finds the last Trove with ICR == 110% even if there is more than one (818ms)
    ✔ redeemCollateral(): reverts when TCR < MCR (873ms)
    ✔ redeemCollateral(): reverts when argument _amount is 0 (444ms)
    ✔ redeemCollateral(): reverts if max fee > 100% (1044ms)
    ✔ redeemCollateral(): reverts if max fee < 0.5% (2901ms)
    ✔ redeemCollateral(): reverts if fee exceeds max fee percentage (1925ms)
    ✔ redeemCollateral(): succeeds if fee is less than max fee percentage (2289ms)
    ✔ redeemCollateral(): doesn't affect the Stability Pool deposits or ETH gain of redeemed-from troves (1775ms)
    ✔ redeemCollateral(): caller can redeem their entire LUSDToken balance (759ms)
    ✔ redeemCollateral(): reverts when requested redemption amount exceeds caller's LUSD token balance (978ms)
    ✔ redeemCollateral(): value of issued ETH == face value of redeemed LUSD (assuming 1 LUSD has value of $1) (2384ms)
    ✔ redeemCollateral(): reverts if there is zero outstanding system debt
    ✔ redeemCollateral(): reverts if caller's tries to redeem more than the outstanding system debt (253ms)
    ✔ redeemCollateral(): a redemption made when base rate is zero increases the base rate (904ms)
    ✔ redeemCollateral(): a redemption made when base rate is non-zero increases the base rate, for negligible time passed (1135ms)
    ✔ redeemCollateral(): lastFeeOpTime doesn't update if less time than decay interval has passed since the last fee operation [ @skip-on-coverage ] (1383ms)
    ✔ redeemCollateral(): a redemption made at zero base rate send a non-zero ETHFee to LQTY staking contract (839ms)
    ✔ redeemCollateral(): a redemption made at zero base increases the ETH-fees-per-LQTY-staked in LQTY Staking contract (897ms)
    ✔ redeemCollateral(): a redemption made at a non-zero base rate send a non-zero ETHFee to LQTY staking contract (1492ms)
    ✔ redeemCollateral(): a redemption made at a non-zero base rate increases ETH-per-LQTY-staked in the staking contract (1618ms)
    ✔ redeemCollateral(): a redemption sends the ETH remainder (ETHDrawn - ETHFee) to the redeemer (992ms)
    ✔ redeemCollateral(): a full redemption (leaving trove with 0 debt), closes the trove (1121ms)
    ✔ redeemCollateral(): emits correct debt and coll values in each redeemed trove's TroveUpdated event (1238ms)
    ✔ redeemCollateral(): a redemption that closes a trove leaves the trove's ETH surplus (collateral - ETH drawn) available for the trove owner to claim (1350ms)
    ✔ redeemCollateral(): a redemption that closes a trove leaves the trove's ETH surplus (collateral - ETH drawn) available for the trove owner after re-opening trove (1885ms)
    ✔ redeemCollateral(): reverts if fee eats up all returned collateral (1021ms)
    ✔ getPendingLUSDDebtReward(): Returns 0 if there is no pending LUSDDebt reward (374ms)
    ✔ getPendingETHReward(): Returns 0 if there is no pending ETH reward (606ms)
    ✔ computeICR(): Returns 0 if trove's coll is worth 0
    ✔ computeICR(): Returns 2^256-1 for ETH:USD = 100, coll = 1 ETH, debt = 100 LUSD
    ✔ computeICR(): returns correct ICR for ETH:USD = 100, coll = 200 ETH, debt = 30 LUSD
    ✔ computeICR(): returns correct ICR for ETH:USD = 250, coll = 1350 ETH, debt = 127 LUSD
    ✔ computeICR(): returns correct ICR for ETH:USD = 100, coll = 1 ETH, debt = 54321 LUSD
    ✔ computeICR(): Returns 2^256-1 if trove has non-zero coll and zero debt
    ✔ checkRecoveryMode(): Returns true when TCR < 150% (237ms)
    ✔ checkRecoveryMode(): Returns false when TCR == 150% (394ms)
    ✔ checkRecoveryMode(): Returns false when TCR > 150% (217ms)
    ✔ checkRecoveryMode(): Returns false when TCR == 0 (213ms)
    ✔ getTroveStake(): Returns stake (190ms)
    ✔ getTroveColl(): Returns coll (178ms)
    ✔ getTroveDebt(): Returns debt (475ms)
    ✔ getTroveStatus(): Returns status (292ms)
    ✔ hasPendingRewards(): Returns false it trove is not active

  Contract: Unipool
    Unipool
      ✔ Two stakers with the same stakes wait DURATION (364ms)
      ✔ Two stakers with the different (1:3) stakes wait DURATION (72ms)
      ✔ Two stakers with the different (1:3) stakes wait DURATION and DURATION/2 (102ms)
      ✔ Three stakers with the different (1:3:5) stakes wait different durations (398ms)
      ✔ Four stakers with gaps of zero total supply (468ms)
      ✔ Four stakers with gaps of zero total supply, with claims in between (506ms)
    Unipool, before calling setAddresses
      ✔ Stake fails (68ms)
      ✔ Withdraw falis (87ms)
      ✔ Claim fails
      ✔ Exit fails


  1008 passing (17m)
  10 pending
  18 failing

  1) Contract: LQTY Token
       permit(): permits and emits an Approval event (replay protected):
     Error: VM Exception while processing transaction: reverted with reason string 'LQTY: invalid signature'
    at LQTYTokenTester.permit (contracts/LQTY/LQTYToken.sol:258)
    at TruffleContract.permit (/Users/maytham/j/persistant.money/node_modules/@nomiclabs/truffle-contract/lib/execute.js:169:26)
    at buildPermitTx (test/GrowthTokenTest.js:102:32)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
    at Context.<anonymous> (test/GrowthTokenTest.js:345:29)
  

  2) Contract: LUSDToken
       Basic token functions, without Proxy
         permits and emits an Approval event (replay protected):
     Error: VM Exception while processing transaction: reverted with reason string 'LUSD: invalid signature'
    at LUSDTokenTester.permit (contracts/LUSDToken.sol:190)
    at TruffleContract.permit (/Users/maytham/j/persistant.money/node_modules/@nomiclabs/truffle-contract/lib/execute.js:169:26)
    at buildPermitTx (test/LUSDTokenTest.js:350:36)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
    at Context.<anonymous> (test/LUSDTokenTest.js:362:33)
  

  3) Contract: BorrowerWrappers
       claimCollateralAndOpenTrove(): without sending any value:
     Error: Transaction reverted without a reason string
    at <UnrecognizedContract>.<unknown> (0x520fe202953c321537c92613d605b0e46c4667e8)
    at Object.execute(address,bytes) (/Users/maytham/j/persistant.money/node_modules/@nomiclabs/truffle-contract/lib/execute.js:169:26)
    at BorrowerWrappersProxy.forwardFunction (utils/proxyHelpers.js:74:51)
    at BorrowerWrappersProxy.claimCollateralAndOpenTrove (utils/proxyHelpers.js:157:17)
    at Context.<anonymous> (test/ProxyBorrowerWrappersScript.js:195:28)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
  

  4) Contract: BorrowerWrappers
       claimCollateralAndOpenTrove(): sending value in the transaction:
     Error: Transaction reverted without a reason string
    at <UnrecognizedContract>.<unknown> (0xc2bf5815e2b85c5f2604dc5d82500e0d2ecff68b)
    at Object.execute(address,bytes) (/Users/maytham/j/persistant.money/node_modules/@nomiclabs/truffle-contract/lib/execute.js:169:26)
    at BorrowerWrappersProxy.forwardFunction (utils/proxyHelpers.js:74:51)
    at BorrowerWrappersProxy.claimCollateralAndOpenTrove (utils/proxyHelpers.js:157:17)
    at Context.<anonymous> (test/ProxyBorrowerWrappersScript.js:227:28)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
  

  5) Contract: BorrowerWrappers
       claimSPRewardsAndRecycle()::
     Error: Transaction reverted without a reason string
    at <UnrecognizedContract>.<unknown> (0xe84435cea234b847691ad80e0d36262a36af3479)
    at Object.execute(address,bytes) (/Users/maytham/j/persistant.money/node_modules/@nomiclabs/truffle-contract/lib/execute.js:169:26)
    at BorrowerWrappersProxy.forwardFunction (utils/proxyHelpers.js:74:51)
    at BorrowerWrappersProxy.claimSPRewardsAndRecycle (utils/proxyHelpers.js:161:17)
    at Context.<anonymous> (test/ProxyBorrowerWrappersScript.js:322:28)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
  

  6) Contract: BorrowerWrappers
       claimStakingGainsAndRecycle(): with only ETH gain:
     Error: Transaction reverted without a reason string
    at <UnrecognizedContract>.<unknown> (0x9d4c98553d02df568582b0e88a53982d3e3f3e55)
    at Object.execute(address,bytes) (/Users/maytham/j/persistant.money/node_modules/@nomiclabs/truffle-contract/lib/execute.js:169:26)
    at BorrowerWrappersProxy.forwardFunction (utils/proxyHelpers.js:74:51)
    at BorrowerWrappersProxy.claimStakingGainsAndRecycle (utils/proxyHelpers.js:165:17)
    at Context.<anonymous> (test/ProxyBorrowerWrappersScript.js:516:28)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
  

  7) Contract: BorrowerWrappers
       claimStakingGainsAndRecycle(): with both ETH and LUSD gains:
     Error: Transaction reverted without a reason string
    at <UnrecognizedContract>.<unknown> (0x3bc15a4d51b7bcb3cbf4ebab07f0f308088f2953)
    at Object.execute(address,bytes) (/Users/maytham/j/persistant.money/node_modules/@nomiclabs/truffle-contract/lib/execute.js:169:26)
    at BorrowerWrappersProxy.forwardFunction (utils/proxyHelpers.js:74:51)
    at BorrowerWrappersProxy.claimStakingGainsAndRecycle (utils/proxyHelpers.js:165:17)
    at Context.<anonymous> (test/ProxyBorrowerWrappersScript.js:677:28)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
  

  8) Contract: StabilityPool Scale Factor issue tests
       Scale Factor issue tests
         1. Liquidation succeeds after P reduced to 1:
     Error: VM Exception while processing transaction: invalid opcode
    at StabilityPool._updateRewardSumAndProduct (contracts/StabilityPool.sol:628)
    at TroveManagerTester.batchLiquidateTroves (contracts/TroveManager.sol:667)
    at TroveManagerTester.liquidate (contracts/TroveManager.sol:308)
    at TruffleContract.liquidate (/Users/maytham/j/persistant.money/node_modules/@nomiclabs/truffle-contract/lib/execute.js:169:26)
    at Context.<anonymous> (test/SP_P_TruncationTest.js:130:24)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
  

  9) Contract: StabilityPool - LQTY Rewards
       LQTY Rewards
         withdrawFromSP(): Depositors with equal initial deposit withdraw correct LQTY gain. No liquidations. No front end.:

      AssertionError: expected 14066904764810674000 to be at most 1000000000000
      + expected - actual

      -14066904764810674000
      +1000000000000
      
      at Context.<anonymous> (test/StabilityPool_LQTYIssuanceTest.js:241:14)
      at processTicksAndRejections (node:internal/process/task_queues:95:5)

  10) Contract: StabilityPool - LQTY Rewards
       LQTY Rewards
         withdrawFromSP(): Depositors with varying initial deposit withdraw correct LQTY gain. No liquidations. No front end.:

      AssertionError: expected 7033452382405337000 to be at most 1000000000000
      + expected - actual

      -7033452382405337000
      +1000000000000
      
      at Context.<anonymous> (test/StabilityPool_LQTYIssuanceTest.js:325:14)
      at processTicksAndRejections (node:internal/process/task_queues:95:5)

  11) Contract: StabilityPool - LQTY Rewards
       LQTY Rewards
         withdrawFromSP(): Depositors with varying initial deposit withdraw correct LQTY gain. No liquidations. No front end.:

      AssertionError: expected 7033452382405337000 to be at most 1000000000000
      + expected - actual

      -7033452382405337000
      +1000000000000
      
      at Context.<anonymous> (test/StabilityPool_LQTYIssuanceTest.js:430:14)
      at processTicksAndRejections (node:internal/process/task_queues:95:5)

  12) Contract: StabilityPool - LQTY Rewards
       LQTY Rewards
         withdrawFromSP(): Depositor withdraws correct LQTY gain after serial pool-emptying liquidations. No front-ends.:

      AssertionError: expected 21100373423904000000 to be at most 1000000000000000
      + expected - actual

      -21100373423904000000
      +1000000000000000
      
      at Context.<anonymous> (test/StabilityPool_LQTYIssuanceTest.js:592:16)
      at processTicksAndRejections (node:internal/process/task_queues:95:5)

  13) Contract: StabilityPool - LQTY Rewards
       LQTY Rewards
         withdrawFromSP(): Several deposits of 100 LUSD span one scale factor change. Depositors withdraw correct LQTY gains:

      AssertionError: expected 42200588719225905000 to be at most 1000000000000000
      + expected - actual

      -42200588719225905000
      +1000000000000000
      
      at Context.<anonymous> (test/StabilityPool_LQTYIssuanceTest.js:876:14)
      at processTicksAndRejections (node:internal/process/task_queues:95:5)

  14) Contract: StabilityPool - LQTY Rewards
       LQTY Rewards
         withdrawFromSP(): Depositors with equal initial deposit withdraw correct LQTY gain. No liquidations. Front ends and kickback rates.:

      AssertionError: expected 5275089286804000000 to be at most 1000000000000
      + expected - actual

      -5275089286804000000
      +1000000000000
      
      at Context.<anonymous> (test/StabilityPool_LQTYIssuanceTest.js:962:14)
      at processTicksAndRejections (node:internal/process/task_queues:95:5)

  15) Contract: StabilityPool - LQTY Rewards
       LQTY Rewards
         withdrawFromSP(): Depositors with varying initial deposit withdraw correct LQTY gain. Front ends and kickback rates:

      AssertionError: expected 2110037342390400000 to be at most 1000000000000000
      + expected - actual

      -2110037342390400000
      +1000000000000000
      
      at Context.<anonymous> (test/StabilityPool_LQTYIssuanceTest.js:1129:14)
      at processTicksAndRejections (node:internal/process/task_queues:95:5)

  16) Contract: StabilityPool - LQTY Rewards
       LQTY Rewards
         withdrawFromSP(): Several deposits of 10k LUSD span one scale factor change. Depositors withdraw correct LQTY gains:

      AssertionError: expected 16880235487690360000 to be at most 1000000000000000
      + expected - actual

      -16880235487690360000
      +1000000000000000
      
      at Context.<anonymous> (test/StabilityPool_LQTYIssuanceTest.js:1577:14)
      at processTicksAndRejections (node:internal/process/task_queues:95:5)

  17) Contract: StabilityPool
       Stability Pool Mechanisms
         provideToSP(): reverts if cannot receive ETH Gain:
     AssertionError: expected 'expected true to be false' to include 'revert'
      at Function.assertRevert (utils/testHelpers.js:1159:14)
      at processTicksAndRejections (node:internal/process/task_queues:95:5)
      at Context.<anonymous> (test/StabilityPoolTest.js:363:7)

  18) Contract: StabilityPool
       Stability Pool Mechanisms
         withdrawFromSP(): succeeds when amount is 0 and system has an undercollateralized trove:

      AssertionError: expected false to be true
      + expected - actual

      -false
      +true
      
      at Context.<anonymous> (test/StabilityPoolTest.js:2083:14)
      at processTicksAndRejections (node:internal/process/task_queues:95:5)



